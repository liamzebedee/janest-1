def l2_0(x):
    # x is a list (or vector) of length 224
    # masks     # add: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[0])
def l2_1(x):
    # x is a list (or vector) of length 224
    # masks     # add: 01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[1])
def l2_2(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[2])
def l2_3(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[3])
def l2_4(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[4])
def l2_5(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[5])
def l2_6(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[6])
def l2_7(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[7])
def l2_8(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[8])
def l2_9(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[9])
def l2_10(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[10])
def l2_11(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[11])
def l2_12(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[12])
def l2_13(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[13])
def l2_14(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[14])
def l2_15(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[15])
def l2_16(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[16])
def l2_17(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[17])
def l2_18(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[18])
def l2_19(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[19])
def l2_20(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[20])
def l2_21(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[21])
def l2_22(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[22])
def l2_23(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[23])
def l2_24(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[24])
def l2_25(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[25])
def l2_26(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[26])
def l2_27(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[27])
def l2_28(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[28])
def l2_29(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[29])
def l2_30(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[30])
def l2_31(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[31])
def l2_32(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[32])
def l2_33(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[33])
def l2_34(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[34])
def l2_35(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[35])
def l2_36(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[36])
def l2_37(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[37])
def l2_38(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[38])
def l2_39(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[39])
def l2_40(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[40])
def l2_41(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[41])
def l2_42(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[42])
def l2_43(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[43])
def l2_44(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[44])
def l2_45(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[45])
def l2_46(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[46])
def l2_47(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[47])
def l2_48(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[48])
def l2_49(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[49])
def l2_50(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[50])
def l2_51(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[51])
def l2_52(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[52])
def l2_53(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[53])
def l2_54(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[54])
def l2_55(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[55])
def l2_56(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[168] + -1.0)
def l2_57(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111101000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[169] + -1.0)
def l2_58(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100100000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[170] + -1.0)
def l2_59(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100010000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011101111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[171] + -1.0)
def l2_60(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100001000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[172] + -1.0)
def l2_61(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000100000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111011111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[173] + -1.0)
def l2_62(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000010000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111101111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[174] + -1.0)
def l2_63(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000001000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111110111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[175] + -1.0)
def l2_64(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000100000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111011111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[176] + -1.0)
def l2_65(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000010000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111101111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[177] + -1.0)
def l2_66(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000001000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111110111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[178] + -1.0)
def l2_67(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000100000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111011111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[179] + -1.0)
def l2_68(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000010000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111101111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[180] + -1.0)
def l2_69(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000001000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111110111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[181] + -1.0)
def l2_70(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000100000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111011111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[182] + -1.0)
def l2_71(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000010000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111101111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[183] + -1.0)
def l2_72(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000001000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111110111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[184] + -1.0)
def l2_73(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000100000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111011111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[185] + -1.0)
def l2_74(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000010000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111101111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[186] + -1.0)
def l2_75(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000001000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111110111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[187] + -1.0)
def l2_76(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000100000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111011111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[188] + -1.0)
def l2_77(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000010000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111101111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[189] + -1.0)
def l2_78(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000001000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111110111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[190] + -1.0)
def l2_79(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000100000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111011111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[191] + -1.0)
def l2_80(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000010000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111101111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[192] + -1.0)
def l2_81(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000001000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111110111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[193] + -1.0)
def l2_82(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000100000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111011111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[194] + -1.0)
def l2_83(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000010000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111101111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[195] + -1.0)
def l2_84(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000001000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111110111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[196] + -1.0)
def l2_85(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000100000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111011111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[197] + -1.0)
def l2_86(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000010000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111101111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[198] + -1.0)
def l2_87(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000001000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111110111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[199] + -1.0)
def l2_88(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000100000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111011111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[200] + -1.0)
def l2_89(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000010000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111101111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[201] + -1.0)
def l2_90(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000001000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111110111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[202] + -1.0)
def l2_91(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000100000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111011111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[203] + -1.0)
def l2_92(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000010000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111101111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[204] + -1.0)
def l2_93(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000001000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111110111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[205] + -1.0)
def l2_94(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000100000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111011111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[206] + -1.0)
def l2_95(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000010000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111101111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[207] + -1.0)
def l2_96(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000001000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111110111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[208] + -1.0)
def l2_97(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000100000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111011111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[209] + -1.0)
def l2_98(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000010000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111101111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[210] + -1.0)
def l2_99(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000001000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111110111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[211] + -1.0)
def l2_100(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000100000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111011111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[212] + -1.0)
def l2_101(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000010000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111101111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[213] + -1.0)
def l2_102(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000001000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111110111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[214] + -1.0)
def l2_103(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000100000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111011111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[215] + -1.0)
def l2_104(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000010000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111101111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[216] + -1.0)
def l2_105(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000001000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111110111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[217] + -1.0)
def l2_106(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000100000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111011111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[218] + -1.0)
def l2_107(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000010000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111101111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[219] + -1.0)
def l2_108(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000001000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111110111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[220] + -1.0)
def l2_109(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000100    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111011
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[221] + -1.0)
def l2_110(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000010    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111101
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[222] + -1.0)
def l2_111(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000001    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111110
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[223] + -1.0)
def l2_112(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[168])
def l2_113(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111101000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[169])
def l2_114(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100100000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[170])
def l2_115(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100010000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011101111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[171])
def l2_116(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100001000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[172])
def l2_117(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000100000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111011111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[173])
def l2_118(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000010000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111101111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[174])
def l2_119(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000001000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111110111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[175])
def l2_120(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000100000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111011111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[176])
def l2_121(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000010000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111101111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[177])
def l2_122(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000001000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111110111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[178])
def l2_123(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000100000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111011111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[179])
def l2_124(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000010000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111101111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[180])
def l2_125(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000001000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111110111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[181])
def l2_126(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000100000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111011111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[182])
def l2_127(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000010000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111101111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[183])
def l2_128(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000001000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111110111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[184])
def l2_129(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000100000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111011111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[185])
def l2_130(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000010000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111101111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[186])
def l2_131(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000001000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111110111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[187])
def l2_132(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000100000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111011111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[188])
def l2_133(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000010000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111101111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[189])
def l2_134(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000001000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111110111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[190])
def l2_135(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000100000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111011111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[191])
def l2_136(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000010000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111101111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[192])
def l2_137(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000001000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111110111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[193])
def l2_138(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000100000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111011111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[194])
def l2_139(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000010000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111101111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[195])
def l2_140(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000001000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111110111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[196])
def l2_141(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000100000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111011111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[197])
def l2_142(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000010000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111101111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[198])
def l2_143(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000001000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111110111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[199])
def l2_144(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000100000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111011111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[200])
def l2_145(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000010000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111101111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[201])
def l2_146(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000001000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111110111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[202])
def l2_147(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000100000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111011111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[203])
def l2_148(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000010000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111101111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[204])
def l2_149(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000001000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111110111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[205])
def l2_150(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000100000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111011111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[206])
def l2_151(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000010000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111101111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[207])
def l2_152(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000001000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111110111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[208])
def l2_153(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000100000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111011111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[209])
def l2_154(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000010000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111101111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[210])
def l2_155(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000001000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111110111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[211])
def l2_156(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000100000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111011111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[212])
def l2_157(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000010000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111101111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[213])
def l2_158(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000001000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111110111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[214])
def l2_159(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000100000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111011111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[215])
def l2_160(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000010000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111101111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[216])
def l2_161(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000001000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111110111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[217])
def l2_162(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000100000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111011111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[218])
def l2_163(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000010000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111101111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[219])
def l2_164(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000001000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111110111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[220])
def l2_165(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000100    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111011
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[221])
def l2_166(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000010    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111101
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[222])
def l2_167(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000001    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111110
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[223])
def l2_168(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[168] + 1.0)
def l2_169(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111101000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[169] + 1.0)
def l2_170(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100100000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[170] + 1.0)
def l2_171(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100010000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011101111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[171] + 1.0)
def l2_172(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100001000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[172] + 1.0)
def l2_173(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000100000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111011111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[173] + 1.0)
def l2_174(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000010000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111101111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[174] + 1.0)
def l2_175(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000001000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111110111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[175] + 1.0)
def l2_176(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000100000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111011111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[176] + 1.0)
def l2_177(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000010000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111101111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[177] + 1.0)
def l2_178(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000001000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111110111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[178] + 1.0)
def l2_179(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000100000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111011111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[179] + 1.0)
def l2_180(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000010000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111101111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[180] + 1.0)
def l2_181(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000001000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111110111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[181] + 1.0)
def l2_182(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000100000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111011111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[182] + 1.0)
def l2_183(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000010000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111101111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[183] + 1.0)
def l2_184(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000001000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111110111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[184] + 1.0)
def l2_185(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000100000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111011111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[185] + 1.0)
def l2_186(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000010000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111101111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[186] + 1.0)
def l2_187(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000001000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111110111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[187] + 1.0)
def l2_188(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000100000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111011111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[188] + 1.0)
def l2_189(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000010000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111101111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[189] + 1.0)
def l2_190(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000001000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111110111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[190] + 1.0)
def l2_191(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000100000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111011111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[191] + 1.0)
def l2_192(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000010000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111101111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[192] + 1.0)
def l2_193(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000001000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111110111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[193] + 1.0)
def l2_194(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000100000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111011111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[194] + 1.0)
def l2_195(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000010000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111101111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[195] + 1.0)
def l2_196(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000001000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111110111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[196] + 1.0)
def l2_197(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000100000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111011111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[197] + 1.0)
def l2_198(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000010000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111101111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[198] + 1.0)
def l2_199(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000001000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111110111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[199] + 1.0)
def l2_200(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000100000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111011111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[200] + 1.0)
def l2_201(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000010000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111101111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[201] + 1.0)
def l2_202(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000001000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111110111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[202] + 1.0)
def l2_203(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000100000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111011111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[203] + 1.0)
def l2_204(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000010000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111101111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[204] + 1.0)
def l2_205(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000001000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111110111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[205] + 1.0)
def l2_206(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000100000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111011111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[206] + 1.0)
def l2_207(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000010000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111101111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[207] + 1.0)
def l2_208(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000001000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111110111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[208] + 1.0)
def l2_209(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000100000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111011111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[209] + 1.0)
def l2_210(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000010000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111101111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[210] + 1.0)
def l2_211(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000001000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111110111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[211] + 1.0)
def l2_212(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000100000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111011111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[212] + 1.0)
def l2_213(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000010000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111101111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[213] + 1.0)
def l2_214(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000001000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111110111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[214] + 1.0)
def l2_215(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000100000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111011111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[215] + 1.0)
def l2_216(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000010000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111101111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[216] + 1.0)
def l2_217(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000001000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111110111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[217] + 1.0)
def l2_218(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000100000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111011111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[218] + 1.0)
def l2_219(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000010000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111101111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[219] + 1.0)
def l2_220(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000001000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111110111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[220] + 1.0)
def l2_221(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000100    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111011
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[221] + 1.0)
def l2_222(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000010    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111101
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[222] + 1.0)
def l2_223(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000001    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111110
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[223] + 1.0)
def l2_224(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111
    # bitshifts    x[56] << 3    x[57] << 3    x[58] << 3    x[59] << 3    x[60] << 3    x[61] << 3    x[62] << 3    x[63] << 3    x[64] << 3    x[65] << 3    x[66] << 3    x[67] << 3    x[68] << 3    x[69] << 3    x[70] << 3    x[71] << 3    x[72] << 3    x[73] << 3    x[74] << 3    x[75] << 3    x[76] << 3    x[77] << 3    x[78] << 3    x[79] << 3    x[80] << 3    x[81] << 3    x[82] << 3    x[83] << 3    x[84] << 3    x[85] << 3    x[86] << 3    x[87] << 3    x[88] << 3    x[89] << 3    x[90] << 3    x[91] << 3    x[92] << 3    x[93] << 3    x[94] << 3    x[95] << 3    x[96] << 3    x[97] << 3    x[98] << 3    x[99] << 3    x[100] << 3    x[101] << 3    x[102] << 3    x[103] << 3    x[104] << 3    x[105] << 3    x[106] << 3    x[107] << 3    x[108] << 3    x[109] << 3    x[110] << 3    x[111] << 3    x[112] >> 3    x[113] >> 3    x[114] >> 3    x[115] >> 3    x[116] >> 3    x[117] >> 3    x[118] >> 3    x[119] >> 3    x[120] >> 3    x[121] >> 3    x[122] >> 3    x[123] >> 3    x[124] >> 3    x[125] >> 3    x[126] >> 3    x[127] >> 3    x[128] >> 3    x[129] >> 3    x[130] >> 3    x[131] >> 3    x[132] >> 3    x[133] >> 3    x[134] >> 3    x[135] >> 3    x[136] >> 3    x[137] >> 3    x[138] >> 3    x[139] >> 3    x[140] >> 3    x[141] >> 3    x[142] >> 3    x[143] >> 3    x[144] >> 3    x[145] >> 3    x[146] >> 3    x[147] >> 3    x[148] >> 3    x[149] >> 3    x[150] >> 3    x[151] >> 3    x[152] >> 3    x[153] >> 3    x[154] >> 3    x[155] >> 3    x[156] >> 3    x[157] >> 3    x[158] >> 3    x[159] >> 3    x[160] >> 3    x[161] >> 3    x[162] >> 3    x[163] >> 3    x[164] >> 3    x[165] >> 3    x[166] >> 3    x[167] >> 3
    return max(0, 8.0*x[56] + 8.0*x[57] + 8.0*x[58] + 8.0*x[59] + 8.0*x[60] + 8.0*x[61] + 8.0*x[62] + 8.0*x[63] + 8.0*x[64] + 8.0*x[65] + 8.0*x[66] + 8.0*x[67] + 8.0*x[68] + 8.0*x[69] + 8.0*x[70] + 8.0*x[71] + 8.0*x[72] + 8.0*x[73] + 8.0*x[74] + 8.0*x[75] + 8.0*x[76] + 8.0*x[77] + 8.0*x[78] + 8.0*x[79] + 8.0*x[80] + 8.0*x[81] + 8.0*x[82] + 8.0*x[83] + 8.0*x[84] + 8.0*x[85] + 8.0*x[86] + 8.0*x[87] + 8.0*x[88] + 8.0*x[89] + 8.0*x[90] + 8.0*x[91] + 8.0*x[92] + 8.0*x[93] + 8.0*x[94] + 8.0*x[95] + 8.0*x[96] + 8.0*x[97] + 8.0*x[98] + 8.0*x[99] + 8.0*x[100] + 8.0*x[101] + 8.0*x[102] + 8.0*x[103] + 8.0*x[104] + 8.0*x[105] + 8.0*x[106] + 8.0*x[107] + 8.0*x[108] + 8.0*x[109] + 8.0*x[110] + 8.0*x[111] + -8.0*x[112] + -8.0*x[113] + -8.0*x[114] + -8.0*x[115] + -8.0*x[116] + -8.0*x[117] + -8.0*x[118] + -8.0*x[119] + -8.0*x[120] + -8.0*x[121] + -8.0*x[122] + -8.0*x[123] + -8.0*x[124] + -8.0*x[125] + -8.0*x[126] + -8.0*x[127] + -8.0*x[128] + -8.0*x[129] + -8.0*x[130] + -8.0*x[131] + -8.0*x[132] + -8.0*x[133] + -8.0*x[134] + -8.0*x[135] + -8.0*x[136] + -8.0*x[137] + -8.0*x[138] + -8.0*x[139] + -8.0*x[140] + -8.0*x[141] + -8.0*x[142] + -8.0*x[143] + -8.0*x[144] + -8.0*x[145] + -8.0*x[146] + -8.0*x[147] + -8.0*x[148] + -8.0*x[149] + -8.0*x[150] + -8.0*x[151] + -8.0*x[152] + -8.0*x[153] + -8.0*x[154] + -8.0*x[155] + -8.0*x[156] + -8.0*x[157] + -8.0*x[158] + -8.0*x[159] + -8.0*x[160] + -8.0*x[161] + -8.0*x[162] + -8.0*x[163] + -8.0*x[164] + -8.0*x[165] + -8.0*x[166] + -8.0*x[167])
def l2_225(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
def l2_226(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
def l2_227(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
def l2_228(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
def l2_229(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
def l2_230(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
def l2_231(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
def l2_(x):
    # x is a list (or vector) of length 224
    return [
        l2_0(x),
        l2_1(x),
        l2_2(x),
        l2_3(x),
        l2_4(x),
        l2_5(x),
        l2_6(x),
        l2_7(x),
        l2_8(x),
        l2_9(x),
        l2_10(x),
        l2_11(x),
        l2_12(x),
        l2_13(x),
        l2_14(x),
        l2_15(x),
        l2_16(x),
        l2_17(x),
        l2_18(x),
        l2_19(x),
        l2_20(x),
        l2_21(x),
        l2_22(x),
        l2_23(x),
        l2_24(x),
        l2_25(x),
        l2_26(x),
        l2_27(x),
        l2_28(x),
        l2_29(x),
        l2_30(x),
        l2_31(x),
        l2_32(x),
        l2_33(x),
        l2_34(x),
        l2_35(x),
        l2_36(x),
        l2_37(x),
        l2_38(x),
        l2_39(x),
        l2_40(x),
        l2_41(x),
        l2_42(x),
        l2_43(x),
        l2_44(x),
        l2_45(x),
        l2_46(x),
        l2_47(x),
        l2_48(x),
        l2_49(x),
        l2_50(x),
        l2_51(x),
        l2_52(x),
        l2_53(x),
        l2_54(x),
        l2_55(x),
        l2_56(x),
        l2_57(x),
        l2_58(x),
        l2_59(x),
        l2_60(x),
        l2_61(x),
        l2_62(x),
        l2_63(x),
        l2_64(x),
        l2_65(x),
        l2_66(x),
        l2_67(x),
        l2_68(x),
        l2_69(x),
        l2_70(x),
        l2_71(x),
        l2_72(x),
        l2_73(x),
        l2_74(x),
        l2_75(x),
        l2_76(x),
        l2_77(x),
        l2_78(x),
        l2_79(x),
        l2_80(x),
        l2_81(x),
        l2_82(x),
        l2_83(x),
        l2_84(x),
        l2_85(x),
        l2_86(x),
        l2_87(x),
        l2_88(x),
        l2_89(x),
        l2_90(x),
        l2_91(x),
        l2_92(x),
        l2_93(x),
        l2_94(x),
        l2_95(x),
        l2_96(x),
        l2_97(x),
        l2_98(x),
        l2_99(x),
        l2_100(x),
        l2_101(x),
        l2_102(x),
        l2_103(x),
        l2_104(x),
        l2_105(x),
        l2_106(x),
        l2_107(x),
        l2_108(x),
        l2_109(x),
        l2_110(x),
        l2_111(x),
        l2_112(x),
        l2_113(x),
        l2_114(x),
        l2_115(x),
        l2_116(x),
        l2_117(x),
        l2_118(x),
        l2_119(x),
        l2_120(x),
        l2_121(x),
        l2_122(x),
        l2_123(x),
        l2_124(x),
        l2_125(x),
        l2_126(x),
        l2_127(x),
        l2_128(x),
        l2_129(x),
        l2_130(x),
        l2_131(x),
        l2_132(x),
        l2_133(x),
        l2_134(x),
        l2_135(x),
        l2_136(x),
        l2_137(x),
        l2_138(x),
        l2_139(x),
        l2_140(x),
        l2_141(x),
        l2_142(x),
        l2_143(x),
        l2_144(x),
        l2_145(x),
        l2_146(x),
        l2_147(x),
        l2_148(x),
        l2_149(x),
        l2_150(x),
        l2_151(x),
        l2_152(x),
        l2_153(x),
        l2_154(x),
        l2_155(x),
        l2_156(x),
        l2_157(x),
        l2_158(x),
        l2_159(x),
        l2_160(x),
        l2_161(x),
        l2_162(x),
        l2_163(x),
        l2_164(x),
        l2_165(x),
        l2_166(x),
        l2_167(x),
        l2_168(x),
        l2_169(x),
        l2_170(x),
        l2_171(x),
        l2_172(x),
        l2_173(x),
        l2_174(x),
        l2_175(x),
        l2_176(x),
        l2_177(x),
        l2_178(x),
        l2_179(x),
        l2_180(x),
        l2_181(x),
        l2_182(x),
        l2_183(x),
        l2_184(x),
        l2_185(x),
        l2_186(x),
        l2_187(x),
        l2_188(x),
        l2_189(x),
        l2_190(x),
        l2_191(x),
        l2_192(x),
        l2_193(x),
        l2_194(x),
        l2_195(x),
        l2_196(x),
        l2_197(x),
        l2_198(x),
        l2_199(x),
        l2_200(x),
        l2_201(x),
        l2_202(x),
        l2_203(x),
        l2_204(x),
        l2_205(x),
        l2_206(x),
        l2_207(x),
        l2_208(x),
        l2_209(x),
        l2_210(x),
        l2_211(x),
        l2_212(x),
        l2_213(x),
        l2_214(x),
        l2_215(x),
        l2_216(x),
        l2_217(x),
        l2_218(x),
        l2_219(x),
        l2_220(x),
        l2_221(x),
        l2_222(x),
        l2_223(x),
        l2_224(x),
        l2_225(x),
        l2_226(x),
        l2_227(x),
        l2_228(x),
        l2_229(x),
        l2_230(x),
        l2_231(x),
    ]