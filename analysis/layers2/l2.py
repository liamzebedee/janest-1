import numpy as np


def l2_0(x):
    # x is a list (or vector) of length 224
    # masks     # add: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[0])
import numpy as np


def l2_1(x):
    # x is a list (or vector) of length 224
    # masks     # add: 01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 10111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[1])
import numpy as np


def l2_2(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[2])
import numpy as np


def l2_3(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[3])
import numpy as np


def l2_4(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[4])
import numpy as np


def l2_5(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[5])
import numpy as np


def l2_6(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[6])
import numpy as np


def l2_7(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[7])
import numpy as np


def l2_8(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[8])
import numpy as np


def l2_9(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[9])
import numpy as np


def l2_10(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[10])
import numpy as np


def l2_11(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[11])
import numpy as np


def l2_12(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[12])
import numpy as np


def l2_13(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[13])
import numpy as np


def l2_14(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[14])
import numpy as np


def l2_15(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[15])
import numpy as np


def l2_16(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[16])
import numpy as np


def l2_17(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[17])
import numpy as np


def l2_18(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[18])
import numpy as np


def l2_19(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[19])
import numpy as np


def l2_20(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[20])
import numpy as np


def l2_21(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[21])
import numpy as np


def l2_22(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[22])
import numpy as np


def l2_23(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[23])
import numpy as np


def l2_24(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[24])
import numpy as np


def l2_25(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[25])
import numpy as np


def l2_26(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[26])
import numpy as np


def l2_27(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[27])
import numpy as np


def l2_28(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[28])
import numpy as np


def l2_29(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[29])
import numpy as np


def l2_30(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[30])
import numpy as np


def l2_31(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[31])
import numpy as np


def l2_32(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[32])
import numpy as np


def l2_33(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[33])
import numpy as np


def l2_34(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[34])
import numpy as np


def l2_35(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[35])
import numpy as np


def l2_36(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[36])
import numpy as np


def l2_37(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[37])
import numpy as np


def l2_38(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[38])
import numpy as np


def l2_39(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[39])
import numpy as np


def l2_40(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[40])
import numpy as np


def l2_41(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[41])
import numpy as np


def l2_42(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[42])
import numpy as np


def l2_43(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[43])
import numpy as np


def l2_44(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[44])
import numpy as np


def l2_45(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[45])
import numpy as np


def l2_46(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[46])
import numpy as np


def l2_47(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[47])
import numpy as np


def l2_48(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[48])
import numpy as np


def l2_49(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[49])
import numpy as np


def l2_50(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[50])
import numpy as np


def l2_51(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[51])
import numpy as np


def l2_52(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[52])
import numpy as np


def l2_53(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[53])
import numpy as np


def l2_54(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[54])
import numpy as np


def l2_55(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, x[55])
import numpy as np


def l2_56(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[168] + -1.0)
import numpy as np


def l2_57(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111101000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[169] + -1.0)
import numpy as np


def l2_58(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100100000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[170] + -1.0)
import numpy as np


def l2_59(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100010000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011101111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[171] + -1.0)
import numpy as np


def l2_60(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100001000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[172] + -1.0)
import numpy as np


def l2_61(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000100000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111011111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[173] + -1.0)
import numpy as np


def l2_62(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000010000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111101111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[174] + -1.0)
import numpy as np


def l2_63(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000001000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111110111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[175] + -1.0)
import numpy as np


def l2_64(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000100000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111011111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[176] + -1.0)
import numpy as np


def l2_65(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000010000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111101111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[177] + -1.0)
import numpy as np


def l2_66(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000001000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111110111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[178] + -1.0)
import numpy as np


def l2_67(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000100000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111011111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[179] + -1.0)
import numpy as np


def l2_68(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000010000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111101111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[180] + -1.0)
import numpy as np


def l2_69(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000001000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111110111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[181] + -1.0)
import numpy as np


def l2_70(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000100000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111011111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[182] + -1.0)
import numpy as np


def l2_71(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000010000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111101111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[183] + -1.0)
import numpy as np


def l2_72(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000001000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111110111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[184] + -1.0)
import numpy as np


def l2_73(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000100000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111011111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[185] + -1.0)
import numpy as np


def l2_74(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000010000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111101111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[186] + -1.0)
import numpy as np


def l2_75(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000001000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111110111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[187] + -1.0)
import numpy as np


def l2_76(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000100000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111011111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[188] + -1.0)
import numpy as np


def l2_77(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000010000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111101111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[189] + -1.0)
import numpy as np


def l2_78(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000001000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111110111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[190] + -1.0)
import numpy as np


def l2_79(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000100000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111011111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[191] + -1.0)
import numpy as np


def l2_80(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000010000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111101111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[192] + -1.0)
import numpy as np


def l2_81(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000001000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111110111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[193] + -1.0)
import numpy as np


def l2_82(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000100000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111011111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[194] + -1.0)
import numpy as np


def l2_83(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000010000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111101111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[195] + -1.0)
import numpy as np


def l2_84(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000001000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111110111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[196] + -1.0)
import numpy as np


def l2_85(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000100000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111011111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[197] + -1.0)
import numpy as np


def l2_86(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000010000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111101111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[198] + -1.0)
import numpy as np


def l2_87(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000001000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111110111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[199] + -1.0)
import numpy as np


def l2_88(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000100000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111011111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[200] + -1.0)
import numpy as np


def l2_89(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000010000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111101111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[201] + -1.0)
import numpy as np


def l2_90(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000001000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111110111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[202] + -1.0)
import numpy as np


def l2_91(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000100000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111011111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[203] + -1.0)
import numpy as np


def l2_92(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000010000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111101111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[204] + -1.0)
import numpy as np


def l2_93(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000001000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111110111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[205] + -1.0)
import numpy as np


def l2_94(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000100000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111011111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[206] + -1.0)
import numpy as np


def l2_95(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000010000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111101111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[207] + -1.0)
import numpy as np


def l2_96(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000001000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111110111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[208] + -1.0)
import numpy as np


def l2_97(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000100000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111011111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[209] + -1.0)
import numpy as np


def l2_98(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000010000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111101111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[210] + -1.0)
import numpy as np


def l2_99(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000001000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111110111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[211] + -1.0)
import numpy as np


def l2_100(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000100000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111011111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[212] + -1.0)
import numpy as np


def l2_101(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000010000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111101111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[213] + -1.0)
import numpy as np


def l2_102(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000001000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111110111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[214] + -1.0)
import numpy as np


def l2_103(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000100000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111011111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[215] + -1.0)
import numpy as np


def l2_104(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000010000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111101111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[216] + -1.0)
import numpy as np


def l2_105(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000001000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111110111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[217] + -1.0)
import numpy as np


def l2_106(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000100000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111011111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[218] + -1.0)
import numpy as np


def l2_107(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000010000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111101111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[219] + -1.0)
import numpy as np


def l2_108(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000001000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111110111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[220] + -1.0)
import numpy as np


def l2_109(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000100    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111011
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[221] + -1.0)
import numpy as np


def l2_110(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000010    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111101
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[222] + -1.0)
import numpy as np


def l2_111(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000001    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111110
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[223] + -1.0)
import numpy as np


def l2_112(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[168])
import numpy as np


def l2_113(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111101000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[169])
import numpy as np


def l2_114(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100100000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[170])
import numpy as np


def l2_115(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100010000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011101111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[171])
import numpy as np


def l2_116(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100001000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[172])
import numpy as np


def l2_117(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000100000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111011111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[173])
import numpy as np


def l2_118(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000010000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111101111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[174])
import numpy as np


def l2_119(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000001000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111110111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[175])
import numpy as np


def l2_120(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000100000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111011111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[176])
import numpy as np


def l2_121(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000010000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111101111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[177])
import numpy as np


def l2_122(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000001000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111110111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[178])
import numpy as np


def l2_123(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000100000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111011111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[179])
import numpy as np


def l2_124(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000010000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111101111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[180])
import numpy as np


def l2_125(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000001000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111110111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[181])
import numpy as np


def l2_126(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000100000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111011111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[182])
import numpy as np


def l2_127(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000010000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111101111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[183])
import numpy as np


def l2_128(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000001000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111110111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[184])
import numpy as np


def l2_129(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000100000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111011111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[185])
import numpy as np


def l2_130(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000010000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111101111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[186])
import numpy as np


def l2_131(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000001000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111110111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[187])
import numpy as np


def l2_132(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000100000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111011111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[188])
import numpy as np


def l2_133(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000010000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111101111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[189])
import numpy as np


def l2_134(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000001000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111110111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[190])
import numpy as np


def l2_135(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000100000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111011111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[191])
import numpy as np


def l2_136(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000010000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111101111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[192])
import numpy as np


def l2_137(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000001000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111110111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[193])
import numpy as np


def l2_138(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000100000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111011111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[194])
import numpy as np


def l2_139(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000010000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111101111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[195])
import numpy as np


def l2_140(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000001000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111110111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[196])
import numpy as np


def l2_141(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000100000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111011111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[197])
import numpy as np


def l2_142(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000010000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111101111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[198])
import numpy as np


def l2_143(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000001000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111110111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[199])
import numpy as np


def l2_144(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000100000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111011111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[200])
import numpy as np


def l2_145(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000010000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111101111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[201])
import numpy as np


def l2_146(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000001000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111110111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[202])
import numpy as np


def l2_147(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000100000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111011111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[203])
import numpy as np


def l2_148(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000010000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111101111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[204])
import numpy as np


def l2_149(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000001000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111110111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[205])
import numpy as np


def l2_150(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000100000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111011111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[206])
import numpy as np


def l2_151(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000010000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111101111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[207])
import numpy as np


def l2_152(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000001000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111110111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[208])
import numpy as np


def l2_153(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000100000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111011111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[209])
import numpy as np


def l2_154(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000010000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111101111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[210])
import numpy as np


def l2_155(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000001000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111110111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[211])
import numpy as np


def l2_156(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000100000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111011111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[212])
import numpy as np


def l2_157(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000010000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111101111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[213])
import numpy as np


def l2_158(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000001000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111110111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[214])
import numpy as np


def l2_159(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000100000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111011111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[215])
import numpy as np


def l2_160(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000010000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111101111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[216])
import numpy as np


def l2_161(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000001000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111110111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[217])
import numpy as np


def l2_162(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000100000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111011111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[218])
import numpy as np


def l2_163(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000010000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111101111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[219])
import numpy as np


def l2_164(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000001000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111110111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[220])
import numpy as np


def l2_165(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000100    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111011
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[221])
import numpy as np


def l2_166(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000010    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111101
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[222])
import numpy as np


def l2_167(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000001    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111110
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[223])
import numpy as np


def l2_168(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[168] + 1.0)
import numpy as np


def l2_169(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111101000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[169] + 1.0)
import numpy as np


def l2_170(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100100000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[170] + 1.0)
import numpy as np


def l2_171(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100010000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011101111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[171] + 1.0)
import numpy as np


def l2_172(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100001000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[172] + 1.0)
import numpy as np


def l2_173(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000100000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111011111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[173] + 1.0)
import numpy as np


def l2_174(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000010000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111101111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[174] + 1.0)
import numpy as np


def l2_175(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000001000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111110111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[175] + 1.0)
import numpy as np


def l2_176(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000100000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111011111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[176] + 1.0)
import numpy as np


def l2_177(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000010000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111101111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[177] + 1.0)
import numpy as np


def l2_178(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000001000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111110111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[178] + 1.0)
import numpy as np


def l2_179(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000100000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111011111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[179] + 1.0)
import numpy as np


def l2_180(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000010000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111101111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[180] + 1.0)
import numpy as np


def l2_181(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000001000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111110111111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[181] + 1.0)
import numpy as np


def l2_182(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000100000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111011111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[182] + 1.0)
import numpy as np


def l2_183(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000010000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111101111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[183] + 1.0)
import numpy as np


def l2_184(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000001000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111110111111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[184] + 1.0)
import numpy as np


def l2_185(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000100000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111011111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[185] + 1.0)
import numpy as np


def l2_186(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000010000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111101111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[186] + 1.0)
import numpy as np


def l2_187(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000001000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111110111111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[187] + 1.0)
import numpy as np


def l2_188(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000100000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111011111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[188] + 1.0)
import numpy as np


def l2_189(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000010000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111101111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[189] + 1.0)
import numpy as np


def l2_190(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000001000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111110111111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[190] + 1.0)
import numpy as np


def l2_191(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000100000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111011111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[191] + 1.0)
import numpy as np


def l2_192(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000010000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111101111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[192] + 1.0)
import numpy as np


def l2_193(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000001000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111110111111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[193] + 1.0)
import numpy as np


def l2_194(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000100000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111011111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[194] + 1.0)
import numpy as np


def l2_195(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000010000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111101111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[195] + 1.0)
import numpy as np


def l2_196(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000001000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111110111111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[196] + 1.0)
import numpy as np


def l2_197(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000100000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111011111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[197] + 1.0)
import numpy as np


def l2_198(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000010000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111101111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[198] + 1.0)
import numpy as np


def l2_199(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000001000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111110111111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[199] + 1.0)
import numpy as np


def l2_200(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000100000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111011111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[200] + 1.0)
import numpy as np


def l2_201(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000010000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111101111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[201] + 1.0)
import numpy as np


def l2_202(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000001000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111110111111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[202] + 1.0)
import numpy as np


def l2_203(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000100000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111011111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[203] + 1.0)
import numpy as np


def l2_204(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000010000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111101111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[204] + 1.0)
import numpy as np


def l2_205(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000001000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111110111111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[205] + 1.0)
import numpy as np


def l2_206(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000100000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111011111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[206] + 1.0)
import numpy as np


def l2_207(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000010000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111101111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[207] + 1.0)
import numpy as np


def l2_208(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000001000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111110111111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[208] + 1.0)
import numpy as np


def l2_209(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000100000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111011111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[209] + 1.0)
import numpy as np


def l2_210(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000010000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111101111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[210] + 1.0)
import numpy as np


def l2_211(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000001000000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111110111111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[211] + 1.0)
import numpy as np


def l2_212(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000100000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111011111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[212] + 1.0)
import numpy as np


def l2_213(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000010000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111101111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[213] + 1.0)
import numpy as np


def l2_214(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000001000000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111110111111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[214] + 1.0)
import numpy as np


def l2_215(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000100000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111011111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[215] + 1.0)
import numpy as np


def l2_216(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000010000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111101111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[216] + 1.0)
import numpy as np


def l2_217(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000001000000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111110111111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[217] + 1.0)
import numpy as np


def l2_218(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000100000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111011111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[218] + 1.0)
import numpy as np


def l2_219(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000010000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111101111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[219] + 1.0)
import numpy as np


def l2_220(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000001000    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111110111
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[220] + 1.0)
import numpy as np


def l2_221(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000100    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111011
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[221] + 1.0)
import numpy as np


def l2_222(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000010    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111101
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[222] + 1.0)
import numpy as np


def l2_223(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000001    # sub: 00000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111110
    # bitshifts
    return max(0, -1.0*x[56] + -1.0*x[57] + -1.0*x[58] + -1.0*x[59] + -1.0*x[60] + -1.0*x[61] + -1.0*x[62] + -1.0*x[63] + -1.0*x[64] + -1.0*x[65] + -1.0*x[66] + -1.0*x[67] + -1.0*x[68] + -1.0*x[69] + -1.0*x[70] + -1.0*x[71] + -1.0*x[72] + -1.0*x[73] + -1.0*x[74] + -1.0*x[75] + -1.0*x[76] + -1.0*x[77] + -1.0*x[78] + -1.0*x[79] + -1.0*x[80] + -1.0*x[81] + -1.0*x[82] + -1.0*x[83] + -1.0*x[84] + -1.0*x[85] + -1.0*x[86] + -1.0*x[87] + -1.0*x[88] + -1.0*x[89] + -1.0*x[90] + -1.0*x[91] + -1.0*x[92] + -1.0*x[93] + -1.0*x[94] + -1.0*x[95] + -1.0*x[96] + -1.0*x[97] + -1.0*x[98] + -1.0*x[99] + -1.0*x[100] + -1.0*x[101] + -1.0*x[102] + -1.0*x[103] + -1.0*x[104] + -1.0*x[105] + -1.0*x[106] + -1.0*x[107] + -1.0*x[108] + -1.0*x[109] + -1.0*x[110] + -1.0*x[111] + x[112] + x[113] + x[114] + x[115] + x[116] + x[117] + x[118] + x[119] + x[120] + x[121] + x[122] + x[123] + x[124] + x[125] + x[126] + x[127] + x[128] + x[129] + x[130] + x[131] + x[132] + x[133] + x[134] + x[135] + x[136] + x[137] + x[138] + x[139] + x[140] + x[141] + x[142] + x[143] + x[144] + x[145] + x[146] + x[147] + x[148] + x[149] + x[150] + x[151] + x[152] + x[153] + x[154] + x[155] + x[156] + x[157] + x[158] + x[159] + x[160] + x[161] + x[162] + x[163] + x[164] + x[165] + x[166] + x[167] + x[223] + 1.0)
import numpy as np


def l2_224(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111
    # bitshifts    x[56] << 3    x[57] << 3    x[58] << 3    x[59] << 3    x[60] << 3    x[61] << 3    x[62] << 3    x[63] << 3    x[64] << 3    x[65] << 3    x[66] << 3    x[67] << 3    x[68] << 3    x[69] << 3    x[70] << 3    x[71] << 3    x[72] << 3    x[73] << 3    x[74] << 3    x[75] << 3    x[76] << 3    x[77] << 3    x[78] << 3    x[79] << 3    x[80] << 3    x[81] << 3    x[82] << 3    x[83] << 3    x[84] << 3    x[85] << 3    x[86] << 3    x[87] << 3    x[88] << 3    x[89] << 3    x[90] << 3    x[91] << 3    x[92] << 3    x[93] << 3    x[94] << 3    x[95] << 3    x[96] << 3    x[97] << 3    x[98] << 3    x[99] << 3    x[100] << 3    x[101] << 3    x[102] << 3    x[103] << 3    x[104] << 3    x[105] << 3    x[106] << 3    x[107] << 3    x[108] << 3    x[109] << 3    x[110] << 3    x[111] << 3    x[112] >> 3    x[113] >> 3    x[114] >> 3    x[115] >> 3    x[116] >> 3    x[117] >> 3    x[118] >> 3    x[119] >> 3    x[120] >> 3    x[121] >> 3    x[122] >> 3    x[123] >> 3    x[124] >> 3    x[125] >> 3    x[126] >> 3    x[127] >> 3    x[128] >> 3    x[129] >> 3    x[130] >> 3    x[131] >> 3    x[132] >> 3    x[133] >> 3    x[134] >> 3    x[135] >> 3    x[136] >> 3    x[137] >> 3    x[138] >> 3    x[139] >> 3    x[140] >> 3    x[141] >> 3    x[142] >> 3    x[143] >> 3    x[144] >> 3    x[145] >> 3    x[146] >> 3    x[147] >> 3    x[148] >> 3    x[149] >> 3    x[150] >> 3    x[151] >> 3    x[152] >> 3    x[153] >> 3    x[154] >> 3    x[155] >> 3    x[156] >> 3    x[157] >> 3    x[158] >> 3    x[159] >> 3    x[160] >> 3    x[161] >> 3    x[162] >> 3    x[163] >> 3    x[164] >> 3    x[165] >> 3    x[166] >> 3    x[167] >> 3
    return max(0, 8.0*x[56] + 8.0*x[57] + 8.0*x[58] + 8.0*x[59] + 8.0*x[60] + 8.0*x[61] + 8.0*x[62] + 8.0*x[63] + 8.0*x[64] + 8.0*x[65] + 8.0*x[66] + 8.0*x[67] + 8.0*x[68] + 8.0*x[69] + 8.0*x[70] + 8.0*x[71] + 8.0*x[72] + 8.0*x[73] + 8.0*x[74] + 8.0*x[75] + 8.0*x[76] + 8.0*x[77] + 8.0*x[78] + 8.0*x[79] + 8.0*x[80] + 8.0*x[81] + 8.0*x[82] + 8.0*x[83] + 8.0*x[84] + 8.0*x[85] + 8.0*x[86] + 8.0*x[87] + 8.0*x[88] + 8.0*x[89] + 8.0*x[90] + 8.0*x[91] + 8.0*x[92] + 8.0*x[93] + 8.0*x[94] + 8.0*x[95] + 8.0*x[96] + 8.0*x[97] + 8.0*x[98] + 8.0*x[99] + 8.0*x[100] + 8.0*x[101] + 8.0*x[102] + 8.0*x[103] + 8.0*x[104] + 8.0*x[105] + 8.0*x[106] + 8.0*x[107] + 8.0*x[108] + 8.0*x[109] + 8.0*x[110] + 8.0*x[111] + -8.0*x[112] + -8.0*x[113] + -8.0*x[114] + -8.0*x[115] + -8.0*x[116] + -8.0*x[117] + -8.0*x[118] + -8.0*x[119] + -8.0*x[120] + -8.0*x[121] + -8.0*x[122] + -8.0*x[123] + -8.0*x[124] + -8.0*x[125] + -8.0*x[126] + -8.0*x[127] + -8.0*x[128] + -8.0*x[129] + -8.0*x[130] + -8.0*x[131] + -8.0*x[132] + -8.0*x[133] + -8.0*x[134] + -8.0*x[135] + -8.0*x[136] + -8.0*x[137] + -8.0*x[138] + -8.0*x[139] + -8.0*x[140] + -8.0*x[141] + -8.0*x[142] + -8.0*x[143] + -8.0*x[144] + -8.0*x[145] + -8.0*x[146] + -8.0*x[147] + -8.0*x[148] + -8.0*x[149] + -8.0*x[150] + -8.0*x[151] + -8.0*x[152] + -8.0*x[153] + -8.0*x[154] + -8.0*x[155] + -8.0*x[156] + -8.0*x[157] + -8.0*x[158] + -8.0*x[159] + -8.0*x[160] + -8.0*x[161] + -8.0*x[162] + -8.0*x[163] + -8.0*x[164] + -8.0*x[165] + -8.0*x[166] + -8.0*x[167])
import numpy as np


def l2_225(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
import numpy as np


def l2_226(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
import numpy as np


def l2_227(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
import numpy as np


def l2_228(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
import numpy as np


def l2_229(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
import numpy as np


def l2_230(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
import numpy as np


def l2_231(x):
    # x is a list (or vector) of length 224
    # masks     # add: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts
    return max(0, 0)
def l2_(x):
    # x is a list (or vector) of length 224
    return [
        l2_0(x),
        l2_1(x),
        l2_2(x),
        l2_3(x),
        l2_4(x),
        l2_5(x),
        l2_6(x),
        l2_7(x),
        l2_8(x),
        l2_9(x),
        l2_10(x),
        l2_11(x),
        l2_12(x),
        l2_13(x),
        l2_14(x),
        l2_15(x),
        l2_16(x),
        l2_17(x),
        l2_18(x),
        l2_19(x),
        l2_20(x),
        l2_21(x),
        l2_22(x),
        l2_23(x),
        l2_24(x),
        l2_25(x),
        l2_26(x),
        l2_27(x),
        l2_28(x),
        l2_29(x),
        l2_30(x),
        l2_31(x),
        l2_32(x),
        l2_33(x),
        l2_34(x),
        l2_35(x),
        l2_36(x),
        l2_37(x),
        l2_38(x),
        l2_39(x),
        l2_40(x),
        l2_41(x),
        l2_42(x),
        l2_43(x),
        l2_44(x),
        l2_45(x),
        l2_46(x),
        l2_47(x),
        l2_48(x),
        l2_49(x),
        l2_50(x),
        l2_51(x),
        l2_52(x),
        l2_53(x),
        l2_54(x),
        l2_55(x),
        l2_56(x),
        l2_57(x),
        l2_58(x),
        l2_59(x),
        l2_60(x),
        l2_61(x),
        l2_62(x),
        l2_63(x),
        l2_64(x),
        l2_65(x),
        l2_66(x),
        l2_67(x),
        l2_68(x),
        l2_69(x),
        l2_70(x),
        l2_71(x),
        l2_72(x),
        l2_73(x),
        l2_74(x),
        l2_75(x),
        l2_76(x),
        l2_77(x),
        l2_78(x),
        l2_79(x),
        l2_80(x),
        l2_81(x),
        l2_82(x),
        l2_83(x),
        l2_84(x),
        l2_85(x),
        l2_86(x),
        l2_87(x),
        l2_88(x),
        l2_89(x),
        l2_90(x),
        l2_91(x),
        l2_92(x),
        l2_93(x),
        l2_94(x),
        l2_95(x),
        l2_96(x),
        l2_97(x),
        l2_98(x),
        l2_99(x),
        l2_100(x),
        l2_101(x),
        l2_102(x),
        l2_103(x),
        l2_104(x),
        l2_105(x),
        l2_106(x),
        l2_107(x),
        l2_108(x),
        l2_109(x),
        l2_110(x),
        l2_111(x),
        l2_112(x),
        l2_113(x),
        l2_114(x),
        l2_115(x),
        l2_116(x),
        l2_117(x),
        l2_118(x),
        l2_119(x),
        l2_120(x),
        l2_121(x),
        l2_122(x),
        l2_123(x),
        l2_124(x),
        l2_125(x),
        l2_126(x),
        l2_127(x),
        l2_128(x),
        l2_129(x),
        l2_130(x),
        l2_131(x),
        l2_132(x),
        l2_133(x),
        l2_134(x),
        l2_135(x),
        l2_136(x),
        l2_137(x),
        l2_138(x),
        l2_139(x),
        l2_140(x),
        l2_141(x),
        l2_142(x),
        l2_143(x),
        l2_144(x),
        l2_145(x),
        l2_146(x),
        l2_147(x),
        l2_148(x),
        l2_149(x),
        l2_150(x),
        l2_151(x),
        l2_152(x),
        l2_153(x),
        l2_154(x),
        l2_155(x),
        l2_156(x),
        l2_157(x),
        l2_158(x),
        l2_159(x),
        l2_160(x),
        l2_161(x),
        l2_162(x),
        l2_163(x),
        l2_164(x),
        l2_165(x),
        l2_166(x),
        l2_167(x),
        l2_168(x),
        l2_169(x),
        l2_170(x),
        l2_171(x),
        l2_172(x),
        l2_173(x),
        l2_174(x),
        l2_175(x),
        l2_176(x),
        l2_177(x),
        l2_178(x),
        l2_179(x),
        l2_180(x),
        l2_181(x),
        l2_182(x),
        l2_183(x),
        l2_184(x),
        l2_185(x),
        l2_186(x),
        l2_187(x),
        l2_188(x),
        l2_189(x),
        l2_190(x),
        l2_191(x),
        l2_192(x),
        l2_193(x),
        l2_194(x),
        l2_195(x),
        l2_196(x),
        l2_197(x),
        l2_198(x),
        l2_199(x),
        l2_200(x),
        l2_201(x),
        l2_202(x),
        l2_203(x),
        l2_204(x),
        l2_205(x),
        l2_206(x),
        l2_207(x),
        l2_208(x),
        l2_209(x),
        l2_210(x),
        l2_211(x),
        l2_212(x),
        l2_213(x),
        l2_214(x),
        l2_215(x),
        l2_216(x),
        l2_217(x),
        l2_218(x),
        l2_219(x),
        l2_220(x),
        l2_221(x),
        l2_222(x),
        l2_223(x),
        l2_224(x),
        l2_225(x),
        l2_226(x),
        l2_227(x),
        l2_228(x),
        l2_229(x),
        l2_230(x),
        l2_231(x),
    ]


# Generated from reverse engineering
def l2_g(x: np.ndarray) -> np.ndarray:
    # x is a list (or vector) of length 232
    out = np.empty(232, dtype=np.float32)
    
    # for i in range(0, 56):
    for i in range(0, 56):
        s = x[0 + i]
        out[0 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(56, 57):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[168 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[56 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(57, 58):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[169 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[57 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(58, 59):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[170 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[58 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(59, 60):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[171 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[59 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(60, 61):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[172 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[60 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(61, 62):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[173 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[61 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(62, 63):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[174 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[62 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(63, 64):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[175 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[63 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(64, 65):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[176 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[64 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(65, 66):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[177 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[65 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(66, 67):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[178 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[66 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(67, 68):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[179 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[67 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(68, 69):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[180 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[68 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(69, 70):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[181 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[69 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(70, 71):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[182 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[70 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(71, 72):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[183 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[71 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(72, 73):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[184 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[72 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(73, 74):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[185 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[73 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(74, 75):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[186 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[74 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(75, 76):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[187 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[75 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(76, 77):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[188 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[76 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(77, 78):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[189 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[77 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(78, 79):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[190 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[78 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(79, 80):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[191 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[79 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(80, 81):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[192 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[80 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(81, 82):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[193 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[81 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(82, 83):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[194 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[82 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(83, 84):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[195 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[83 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(84, 85):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[196 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[84 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(85, 86):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[197 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[85 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(86, 87):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[198 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[86 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(87, 88):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[199 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[87 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(88, 89):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[200 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[88 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(89, 90):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[201 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[89 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(90, 91):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[202 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[90 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(91, 92):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[203 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[91 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(92, 93):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[204 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[92 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(93, 94):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[205 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[93 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(94, 95):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[206 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[94 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(95, 96):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[207 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[95 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(96, 97):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[208 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[96 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(97, 98):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[209 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[97 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(98, 99):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[210 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[98 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(99, 100):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[211 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[99 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(100, 101):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[212 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[100 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(101, 102):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[213 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[101 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(102, 103):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[214 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[102 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(103, 104):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[215 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[103 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(104, 105):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[216 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[104 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(105, 106):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[217 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[105 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(106, 107):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[218 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[106 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(107, 108):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[219 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[107 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(108, 109):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[220 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[108 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(109, 110):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[221 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[109 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(110, 111):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[222 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[110 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-1.0]
    # for i in range(111, 112):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[223 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[111 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(112, 113):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[168 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[112 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(113, 114):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[169 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[113 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(114, 115):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[170 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[114 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(115, 116):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[171 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[115 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(116, 117):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[172 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[116 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(117, 118):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[173 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[117 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(118, 119):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[174 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[118 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(119, 120):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[175 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[119 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(120, 121):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[176 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[120 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(121, 122):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[177 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[121 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(122, 123):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[178 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[122 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(123, 124):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[179 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[123 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(124, 125):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[180 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[124 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(125, 126):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[181 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[125 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(126, 127):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[182 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[126 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(127, 128):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[183 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[127 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(128, 129):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[184 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[128 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(129, 130):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[185 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[129 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(130, 131):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[186 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[130 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(131, 132):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[187 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[131 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(132, 133):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[188 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[132 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(133, 134):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[189 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[133 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(134, 135):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[190 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[134 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(135, 136):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[191 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[135 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(136, 137):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[192 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[136 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(137, 138):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[193 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[137 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(138, 139):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[194 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[138 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(139, 140):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[195 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[139 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(140, 141):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[196 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[140 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(141, 142):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[197 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[141 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(142, 143):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[198 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[142 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(143, 144):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[199 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[143 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(144, 145):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[200 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[144 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(145, 146):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[201 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[145 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(146, 147):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[202 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[146 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(147, 148):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[203 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[147 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(148, 149):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[204 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[148 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(149, 150):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[205 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[149 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(150, 151):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[206 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[150 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(151, 152):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[207 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[151 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(152, 153):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[208 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[152 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(153, 154):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[209 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[153 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(154, 155):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[210 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[154 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(155, 156):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[211 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[155 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(156, 157):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[212 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[156 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(157, 158):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[213 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[157 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(158, 159):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[214 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[158 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(159, 160):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[215 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[159 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(160, 161):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[216 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[160 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(161, 162):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[217 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[161 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(162, 163):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[218 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[162 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(163, 164):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[219 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[163 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(164, 165):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[220 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[164 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(165, 166):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[221 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[165 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(166, 167):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[222 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[166 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(167, 168):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[223 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        out[167 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(168, 169):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[168 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[168 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(169, 170):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[169 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[169 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(170, 171):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[170 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[170 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(171, 172):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[171 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[171 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(172, 173):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[172 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[172 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(173, 174):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[173 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[173 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(174, 175):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[174 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[174 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(175, 176):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[175 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[175 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(176, 177):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[176 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[176 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(177, 178):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[177 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[177 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(178, 179):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[178 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[178 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(179, 180):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[179 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[179 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(180, 181):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[180 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[180 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(181, 182):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[181 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[181 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(182, 183):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[182 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[182 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(183, 184):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[183 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[183 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(184, 185):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[184 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[184 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(185, 186):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[185 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[185 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(186, 187):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[186 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[186 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(187, 188):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[187 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[187 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(188, 189):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[188 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[188 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(189, 190):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[189 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[189 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(190, 191):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[190 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[190 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(191, 192):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[191 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[191 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(192, 193):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[192 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[192 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(193, 194):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[193 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[193 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(194, 195):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[194 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[194 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(195, 196):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[195 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[195 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(196, 197):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[196 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[196 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(197, 198):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[197 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[197 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(198, 199):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[198 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[198 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(199, 200):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[199 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[199 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(200, 201):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[200 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[200 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(201, 202):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[201 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[201 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(202, 203):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[202 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[202 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(203, 204):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[203 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[203 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(204, 205):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[204 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[204 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(205, 206):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[205 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[205 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(206, 207):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[206 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[206 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(207, 208):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[207 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[207 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(208, 209):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[208 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[208 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(209, 210):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[209 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[209 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(210, 211):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[210 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[210 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(211, 212):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[211 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[211 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(212, 213):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[212 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[212 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(213, 214):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[213 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[213 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(214, 215):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[214 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[214 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(215, 216):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[215 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[215 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(216, 217):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[216 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[216 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(217, 218):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[217 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[217 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(218, 219):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[218 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[218 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(219, 220):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[219 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[219 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(220, 221):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[220 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[220 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(221, 222):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[221 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[221 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(222, 223):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[222 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[222 + i] = s if s > 0 else 0.0 # ReLu
        
    # biases: 0x1 (len=1)
    biases = [1.0]
    # for i in range(223, 224):
    for i in range(0, 1):
        s = x[112 + i] + x[113 + i] + x[114 + i] + x[115 + i] + x[116 + i] + x[117 + i] + x[118 + i] + x[119 + i] + x[120 + i] + x[121 + i] + x[122 + i] + x[123 + i] + x[124 + i] + x[125 + i] + x[126 + i] + x[127 + i] + x[128 + i] + x[129 + i] + x[130 + i] + x[131 + i] + x[132 + i] + x[133 + i] + x[134 + i] + x[135 + i] + x[136 + i] + x[137 + i] + x[138 + i] + x[139 + i] + x[140 + i] + x[141 + i] + x[142 + i] + x[143 + i] + x[144 + i] + x[145 + i] + x[146 + i] + x[147 + i] + x[148 + i] + x[149 + i] + x[150 + i] + x[151 + i] + x[152 + i] + x[153 + i] + x[154 + i] + x[155 + i] + x[156 + i] + x[157 + i] + x[158 + i] + x[159 + i] + x[160 + i] + x[161 + i] + x[162 + i] + x[163 + i] + x[164 + i] + x[165 + i] + x[166 + i] + x[167 + i] + x[223 + i] + -1 * x[56 + i] + -1 * x[57 + i] + -1 * x[58 + i] + -1 * x[59 + i] + -1 * x[60 + i] + -1 * x[61 + i] + -1 * x[62 + i] + -1 * x[63 + i] + -1 * x[64 + i] + -1 * x[65 + i] + -1 * x[66 + i] + -1 * x[67 + i] + -1 * x[68 + i] + -1 * x[69 + i] + -1 * x[70 + i] + -1 * x[71 + i] + -1 * x[72 + i] + -1 * x[73 + i] + -1 * x[74 + i] + -1 * x[75 + i] + -1 * x[76 + i] + -1 * x[77 + i] + -1 * x[78 + i] + -1 * x[79 + i] + -1 * x[80 + i] + -1 * x[81 + i] + -1 * x[82 + i] + -1 * x[83 + i] + -1 * x[84 + i] + -1 * x[85 + i] + -1 * x[86 + i] + -1 * x[87 + i] + -1 * x[88 + i] + -1 * x[89 + i] + -1 * x[90 + i] + -1 * x[91 + i] + -1 * x[92 + i] + -1 * x[93 + i] + -1 * x[94 + i] + -1 * x[95 + i] + -1 * x[96 + i] + -1 * x[97 + i] + -1 * x[98 + i] + -1 * x[99 + i] + -1 * x[100 + i] + -1 * x[101 + i] + -1 * x[102 + i] + -1 * x[103 + i] + -1 * x[104 + i] + -1 * x[105 + i] + -1 * x[106 + i] + -1 * x[107 + i] + -1 * x[108 + i] + -1 * x[109 + i] + -1 * x[110 + i] + -1 * x[111 + i]
        s += biases[i]
        out[223 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(224, 225):
    for i in range(0, 1):
        s = 8.0 * x[i + 56] + 8.0 * x[i + 57] + 8.0 * x[i + 58] + 8.0 * x[i + 59] + 8.0 * x[i + 60] + 8.0 * x[i + 61] + 8.0 * x[i + 62] + 8.0 * x[i + 63] + 8.0 * x[i + 64] + 8.0 * x[i + 65] + 8.0 * x[i + 66] + 8.0 * x[i + 67] + 8.0 * x[i + 68] + 8.0 * x[i + 69] + 8.0 * x[i + 70] + 8.0 * x[i + 71] + 8.0 * x[i + 72] + 8.0 * x[i + 73] + 8.0 * x[i + 74] + 8.0 * x[i + 75] + 8.0 * x[i + 76] + 8.0 * x[i + 77] + 8.0 * x[i + 78] + 8.0 * x[i + 79] + 8.0 * x[i + 80] + 8.0 * x[i + 81] + 8.0 * x[i + 82] + 8.0 * x[i + 83] + 8.0 * x[i + 84] + 8.0 * x[i + 85] + 8.0 * x[i + 86] + 8.0 * x[i + 87] + 8.0 * x[i + 88] + 8.0 * x[i + 89] + 8.0 * x[i + 90] + 8.0 * x[i + 91] + 8.0 * x[i + 92] + 8.0 * x[i + 93] + 8.0 * x[i + 94] + 8.0 * x[i + 95] + 8.0 * x[i + 96] + 8.0 * x[i + 97] + 8.0 * x[i + 98] + 8.0 * x[i + 99] + 8.0 * x[i + 100] + 8.0 * x[i + 101] + 8.0 * x[i + 102] + 8.0 * x[i + 103] + 8.0 * x[i + 104] + 8.0 * x[i + 105] + 8.0 * x[i + 106] + 8.0 * x[i + 107] + 8.0 * x[i + 108] + 8.0 * x[i + 109] + 8.0 * x[i + 110] + 8.0 * x[i + 111] + -8.0 * x[i + 112] + -8.0 * x[i + 113] + -8.0 * x[i + 114] + -8.0 * x[i + 115] + -8.0 * x[i + 116] + -8.0 * x[i + 117] + -8.0 * x[i + 118] + -8.0 * x[i + 119] + -8.0 * x[i + 120] + -8.0 * x[i + 121] + -8.0 * x[i + 122] + -8.0 * x[i + 123] + -8.0 * x[i + 124] + -8.0 * x[i + 125] + -8.0 * x[i + 126] + -8.0 * x[i + 127] + -8.0 * x[i + 128] + -8.0 * x[i + 129] + -8.0 * x[i + 130] + -8.0 * x[i + 131] + -8.0 * x[i + 132] + -8.0 * x[i + 133] + -8.0 * x[i + 134] + -8.0 * x[i + 135] + -8.0 * x[i + 136] + -8.0 * x[i + 137] + -8.0 * x[i + 138] + -8.0 * x[i + 139] + -8.0 * x[i + 140] + -8.0 * x[i + 141] + -8.0 * x[i + 142] + -8.0 * x[i + 143] + -8.0 * x[i + 144] + -8.0 * x[i + 145] + -8.0 * x[i + 146] + -8.0 * x[i + 147] + -8.0 * x[i + 148] + -8.0 * x[i + 149] + -8.0 * x[i + 150] + -8.0 * x[i + 151] + -8.0 * x[i + 152] + -8.0 * x[i + 153] + -8.0 * x[i + 154] + -8.0 * x[i + 155] + -8.0 * x[i + 156] + -8.0 * x[i + 157] + -8.0 * x[i + 158] + -8.0 * x[i + 159] + -8.0 * x[i + 160] + -8.0 * x[i + 161] + -8.0 * x[i + 162] + -8.0 * x[i + 163] + -8.0 * x[i + 164] + -8.0 * x[i + 165] + -8.0 * x[i + 166] + -8.0 * x[i + 167]
        out[224 + i] = s if s > 0 else 0.0 # ReLu
        
    # for i in range(225, 232):
    for i in range(0, 7):
        s = 0
        out[225 + i] = s if s > 0 else 0.0 # ReLu
        
    return out



