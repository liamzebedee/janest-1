import numpy as np


def l5438_0(x):
    # x is a list (or vector) of length 192
    # masks     # add: 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[1] << 1    x[2] << 2    x[3] << 3    x[4] << 4    x[5] << 5    x[6] << 6    x[7] << 7
    return max(0, x[0] + 2.0*x[1] + 4.0*x[2] + 8.0*x[3] + 16.0*x[4] + 32.0*x[5] + 64.0*x[6] + 128.0*x[7] + -200.0)
import numpy as np


def l5438_1(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[9] << 1    x[10] << 2    x[11] << 3    x[12] << 4    x[13] << 5    x[14] << 6    x[15] << 7
    return max(0, x[8] + 2.0*x[9] + 4.0*x[10] + 8.0*x[11] + 16.0*x[12] + 32.0*x[13] + 64.0*x[14] + 128.0*x[15] + -240.0)
import numpy as np


def l5438_2(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[17] << 1    x[18] << 2    x[19] << 3    x[20] << 4    x[21] << 5    x[22] << 6    x[23] << 7
    return max(0, x[16] + 2.0*x[17] + 4.0*x[18] + 8.0*x[19] + 16.0*x[20] + 32.0*x[21] + 64.0*x[22] + 128.0*x[23] + -102.0)
import numpy as np


def l5438_3(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[25] << 1    x[26] << 2    x[27] << 3    x[28] << 4    x[29] << 5    x[30] << 6    x[31] << 7
    return max(0, x[24] + 2.0*x[25] + 4.0*x[26] + 8.0*x[27] + 16.0*x[28] + 32.0*x[29] + 64.0*x[30] + 128.0*x[31] + -36.0)
import numpy as np


def l5438_4(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[33] << 1    x[34] << 2    x[35] << 3    x[36] << 4    x[37] << 5    x[38] << 6    x[39] << 7    x[64] >> 1    x[65] >> 2    x[66] >> 3    x[67] >> 4    x[68] >> 5    x[69] >> 6    x[70] >> 7    x[71] >> 8
    return max(0, x[32] + 2.0*x[33] + 4.0*x[34] + 8.0*x[35] + 16.0*x[36] + 32.0*x[37] + 64.0*x[38] + 128.0*x[39] + -2.0*x[64] + -4.0*x[65] + -8.0*x[66] + -16.0*x[67] + -32.0*x[68] + -64.0*x[69] + -128.0*x[70] + -256.0*x[71] + -61.0)
import numpy as np


def l5438_5(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111100000000111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[41] << 1    x[42] << 2    x[43] << 3    x[44] << 4    x[45] << 5    x[46] << 6    x[47] << 7    x[72] >> 1    x[73] >> 2    x[74] >> 3    x[75] >> 4    x[76] >> 5    x[77] >> 6    x[78] >> 7    x[79] >> 8
    return max(0, x[40] + 2.0*x[41] + 4.0*x[42] + 8.0*x[43] + 16.0*x[44] + 32.0*x[45] + 64.0*x[46] + 128.0*x[47] + -2.0*x[72] + -4.0*x[73] + -8.0*x[74] + -16.0*x[75] + -32.0*x[76] + -64.0*x[77] + -128.0*x[78] + -256.0*x[79] + -65.0)
import numpy as np


def l5438_6(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111000000001111111111111111111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[49] << 1    x[50] << 2    x[51] << 3    x[52] << 4    x[53] << 5    x[54] << 6    x[55] << 7    x[80] >> 1    x[81] >> 2    x[82] >> 3    x[83] >> 4    x[84] >> 5    x[85] >> 6    x[86] >> 7    x[87] >> 8
    return max(0, x[48] + 2.0*x[49] + 4.0*x[50] + 8.0*x[51] + 16.0*x[52] + 32.0*x[53] + 64.0*x[54] + 128.0*x[55] + -2.0*x[80] + -4.0*x[81] + -8.0*x[82] + -16.0*x[83] + -32.0*x[84] + -64.0*x[85] + -128.0*x[86] + -256.0*x[87] + -171.0)
import numpy as np


def l5438_7(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[57] << 1    x[58] << 2    x[59] << 3    x[60] << 4    x[61] << 5    x[62] << 6    x[63] << 7    x[88] >> 1    x[89] >> 2    x[90] >> 3    x[91] >> 4    x[92] >> 5    x[93] >> 6    x[94] >> 7    x[95] >> 8
    return max(0, x[56] + 2.0*x[57] + 4.0*x[58] + 8.0*x[59] + 16.0*x[60] + 32.0*x[61] + 64.0*x[62] + 128.0*x[63] + -2.0*x[88] + -4.0*x[89] + -8.0*x[90] + -16.0*x[91] + -32.0*x[92] + -64.0*x[93] + -128.0*x[94] + -256.0*x[95] + -51.0)
import numpy as np


def l5438_8(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[97] << 1    x[98] << 2    x[99] << 3    x[100] << 4    x[101] << 5    x[102] << 6    x[103] << 7
    return max(0, x[96] + 2.0*x[97] + 4.0*x[98] + 8.0*x[99] + 16.0*x[100] + 32.0*x[101] + 64.0*x[102] + 128.0*x[103] + -195.0)
import numpy as np


def l5438_9(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[105] << 1    x[106] << 2    x[107] << 3    x[108] << 4    x[109] << 5    x[110] << 6    x[111] << 7
    return max(0, x[104] + 2.0*x[105] + 4.0*x[106] + 8.0*x[107] + 16.0*x[108] + 32.0*x[109] + 64.0*x[110] + 128.0*x[111] + -186.0)
import numpy as np


def l5438_10(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[113] << 1    x[114] << 2    x[115] << 3    x[116] << 4    x[117] << 5    x[118] << 6    x[119] << 7
    return max(0, x[112] + 2.0*x[113] + 4.0*x[114] + 8.0*x[115] + 16.0*x[116] + 32.0*x[117] + 64.0*x[118] + 128.0*x[119] + -173.0)
import numpy as np


def l5438_11(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[121] << 1    x[122] << 2    x[123] << 3    x[124] << 4    x[125] << 5    x[126] << 6    x[127] << 7
    return max(0, x[120] + 2.0*x[121] + 4.0*x[122] + 8.0*x[123] + 16.0*x[124] + 32.0*x[125] + 64.0*x[126] + 128.0*x[127] + -228.0)
import numpy as np


def l5438_12(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111
    # bitshifts    x[129] << 1    x[130] << 2    x[131] << 3    x[132] << 4    x[133] << 5    x[134] << 6    x[135] << 7    x[160] >> 1    x[161] >> 2    x[162] >> 3    x[163] >> 4    x[164] >> 5    x[165] >> 6    x[166] >> 7    x[167] >> 8
    return max(0, x[128] + 2.0*x[129] + 4.0*x[130] + 8.0*x[131] + 16.0*x[132] + 32.0*x[133] + 64.0*x[134] + 128.0*x[135] + -2.0*x[160] + -4.0*x[161] + -8.0*x[162] + -16.0*x[163] + -32.0*x[164] + -64.0*x[165] + -128.0*x[166] + -256.0*x[167] + -118.0)
import numpy as np


def l5438_13(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000111111111111111111111111000000001111111111111111
    # bitshifts    x[137] << 1    x[138] << 2    x[139] << 3    x[140] << 4    x[141] << 5    x[142] << 6    x[143] << 7    x[168] >> 1    x[169] >> 2    x[170] >> 3    x[171] >> 4    x[172] >> 5    x[173] >> 6    x[174] >> 7    x[175] >> 8
    return max(0, x[136] + 2.0*x[137] + 4.0*x[138] + 8.0*x[139] + 16.0*x[140] + 32.0*x[141] + 64.0*x[142] + 128.0*x[143] + -2.0*x[168] + -4.0*x[169] + -8.0*x[170] + -16.0*x[171] + -32.0*x[172] + -64.0*x[173] + -128.0*x[174] + -256.0*x[175] + -150.0)
import numpy as np


def l5438_14(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111110000000011111111
    # bitshifts    x[145] << 1    x[146] << 2    x[147] << 3    x[148] << 4    x[149] << 5    x[150] << 6    x[151] << 7    x[176] >> 1    x[177] >> 2    x[178] >> 3    x[179] >> 4    x[180] >> 5    x[181] >> 6    x[182] >> 7    x[183] >> 8
    return max(0, x[144] + 2.0*x[145] + 4.0*x[146] + 8.0*x[147] + 16.0*x[148] + 32.0*x[149] + 64.0*x[150] + 128.0*x[151] + -2.0*x[176] + -4.0*x[177] + -8.0*x[178] + -16.0*x[179] + -32.0*x[180] + -64.0*x[181] + -128.0*x[182] + -256.0*x[183] + -251.0)
import numpy as np


def l5438_15(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000
    # bitshifts    x[153] << 1    x[154] << 2    x[155] << 3    x[156] << 4    x[157] << 5    x[158] << 6    x[159] << 7    x[184] >> 1    x[185] >> 2    x[186] >> 3    x[187] >> 4    x[188] >> 5    x[189] >> 6    x[190] >> 7    x[191] >> 8
    return max(0, x[152] + 2.0*x[153] + 4.0*x[154] + 8.0*x[155] + 16.0*x[156] + 32.0*x[157] + 64.0*x[158] + 128.0*x[159] + -2.0*x[184] + -4.0*x[185] + -8.0*x[186] + -16.0*x[187] + -32.0*x[188] + -64.0*x[189] + -128.0*x[190] + -256.0*x[191] + -125.0)
import numpy as np


def l5438_16(x):
    # x is a list (or vector) of length 192
    # masks     # add: 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[1] << 1    x[2] << 2    x[3] << 3    x[4] << 4    x[5] << 5    x[6] << 6    x[7] << 7
    return max(0, x[0] + 2.0*x[1] + 4.0*x[2] + 8.0*x[3] + 16.0*x[4] + 32.0*x[5] + 64.0*x[6] + 128.0*x[7] + -199.0)
import numpy as np


def l5438_17(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[9] << 1    x[10] << 2    x[11] << 3    x[12] << 4    x[13] << 5    x[14] << 6    x[15] << 7
    return max(0, x[8] + 2.0*x[9] + 4.0*x[10] + 8.0*x[11] + 16.0*x[12] + 32.0*x[13] + 64.0*x[14] + 128.0*x[15] + -239.0)
import numpy as np


def l5438_18(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[17] << 1    x[18] << 2    x[19] << 3    x[20] << 4    x[21] << 5    x[22] << 6    x[23] << 7
    return max(0, x[16] + 2.0*x[17] + 4.0*x[18] + 8.0*x[19] + 16.0*x[20] + 32.0*x[21] + 64.0*x[22] + 128.0*x[23] + -101.0)
import numpy as np


def l5438_19(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[25] << 1    x[26] << 2    x[27] << 3    x[28] << 4    x[29] << 5    x[30] << 6    x[31] << 7
    return max(0, x[24] + 2.0*x[25] + 4.0*x[26] + 8.0*x[27] + 16.0*x[28] + 32.0*x[29] + 64.0*x[30] + 128.0*x[31] + -35.0)
import numpy as np


def l5438_20(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[33] << 1    x[34] << 2    x[35] << 3    x[36] << 4    x[37] << 5    x[38] << 6    x[39] << 7    x[64] >> 1    x[65] >> 2    x[66] >> 3    x[67] >> 4    x[68] >> 5    x[69] >> 6    x[70] >> 7    x[71] >> 8
    return max(0, x[32] + 2.0*x[33] + 4.0*x[34] + 8.0*x[35] + 16.0*x[36] + 32.0*x[37] + 64.0*x[38] + 128.0*x[39] + -2.0*x[64] + -4.0*x[65] + -8.0*x[66] + -16.0*x[67] + -32.0*x[68] + -64.0*x[69] + -128.0*x[70] + -256.0*x[71] + -60.0)
import numpy as np


def l5438_21(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111100000000111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[41] << 1    x[42] << 2    x[43] << 3    x[44] << 4    x[45] << 5    x[46] << 6    x[47] << 7    x[72] >> 1    x[73] >> 2    x[74] >> 3    x[75] >> 4    x[76] >> 5    x[77] >> 6    x[78] >> 7    x[79] >> 8
    return max(0, x[40] + 2.0*x[41] + 4.0*x[42] + 8.0*x[43] + 16.0*x[44] + 32.0*x[45] + 64.0*x[46] + 128.0*x[47] + -2.0*x[72] + -4.0*x[73] + -8.0*x[74] + -16.0*x[75] + -32.0*x[76] + -64.0*x[77] + -128.0*x[78] + -256.0*x[79] + -64.0)
import numpy as np


def l5438_22(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111000000001111111111111111111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[49] << 1    x[50] << 2    x[51] << 3    x[52] << 4    x[53] << 5    x[54] << 6    x[55] << 7    x[80] >> 1    x[81] >> 2    x[82] >> 3    x[83] >> 4    x[84] >> 5    x[85] >> 6    x[86] >> 7    x[87] >> 8
    return max(0, x[48] + 2.0*x[49] + 4.0*x[50] + 8.0*x[51] + 16.0*x[52] + 32.0*x[53] + 64.0*x[54] + 128.0*x[55] + -2.0*x[80] + -4.0*x[81] + -8.0*x[82] + -16.0*x[83] + -32.0*x[84] + -64.0*x[85] + -128.0*x[86] + -256.0*x[87] + -170.0)
import numpy as np


def l5438_23(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[57] << 1    x[58] << 2    x[59] << 3    x[60] << 4    x[61] << 5    x[62] << 6    x[63] << 7    x[88] >> 1    x[89] >> 2    x[90] >> 3    x[91] >> 4    x[92] >> 5    x[93] >> 6    x[94] >> 7    x[95] >> 8
    return max(0, x[56] + 2.0*x[57] + 4.0*x[58] + 8.0*x[59] + 16.0*x[60] + 32.0*x[61] + 64.0*x[62] + 128.0*x[63] + -2.0*x[88] + -4.0*x[89] + -8.0*x[90] + -16.0*x[91] + -32.0*x[92] + -64.0*x[93] + -128.0*x[94] + -256.0*x[95] + -50.0)
import numpy as np


def l5438_24(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[97] << 1    x[98] << 2    x[99] << 3    x[100] << 4    x[101] << 5    x[102] << 6    x[103] << 7
    return max(0, x[96] + 2.0*x[97] + 4.0*x[98] + 8.0*x[99] + 16.0*x[100] + 32.0*x[101] + 64.0*x[102] + 128.0*x[103] + -194.0)
import numpy as np


def l5438_25(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[105] << 1    x[106] << 2    x[107] << 3    x[108] << 4    x[109] << 5    x[110] << 6    x[111] << 7
    return max(0, x[104] + 2.0*x[105] + 4.0*x[106] + 8.0*x[107] + 16.0*x[108] + 32.0*x[109] + 64.0*x[110] + 128.0*x[111] + -185.0)
import numpy as np


def l5438_26(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[113] << 1    x[114] << 2    x[115] << 3    x[116] << 4    x[117] << 5    x[118] << 6    x[119] << 7
    return max(0, x[112] + 2.0*x[113] + 4.0*x[114] + 8.0*x[115] + 16.0*x[116] + 32.0*x[117] + 64.0*x[118] + 128.0*x[119] + -172.0)
import numpy as np


def l5438_27(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[121] << 1    x[122] << 2    x[123] << 3    x[124] << 4    x[125] << 5    x[126] << 6    x[127] << 7
    return max(0, x[120] + 2.0*x[121] + 4.0*x[122] + 8.0*x[123] + 16.0*x[124] + 32.0*x[125] + 64.0*x[126] + 128.0*x[127] + -227.0)
import numpy as np


def l5438_28(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111
    # bitshifts    x[129] << 1    x[130] << 2    x[131] << 3    x[132] << 4    x[133] << 5    x[134] << 6    x[135] << 7    x[160] >> 1    x[161] >> 2    x[162] >> 3    x[163] >> 4    x[164] >> 5    x[165] >> 6    x[166] >> 7    x[167] >> 8
    return max(0, x[128] + 2.0*x[129] + 4.0*x[130] + 8.0*x[131] + 16.0*x[132] + 32.0*x[133] + 64.0*x[134] + 128.0*x[135] + -2.0*x[160] + -4.0*x[161] + -8.0*x[162] + -16.0*x[163] + -32.0*x[164] + -64.0*x[165] + -128.0*x[166] + -256.0*x[167] + -117.0)
import numpy as np


def l5438_29(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000111111111111111111111111000000001111111111111111
    # bitshifts    x[137] << 1    x[138] << 2    x[139] << 3    x[140] << 4    x[141] << 5    x[142] << 6    x[143] << 7    x[168] >> 1    x[169] >> 2    x[170] >> 3    x[171] >> 4    x[172] >> 5    x[173] >> 6    x[174] >> 7    x[175] >> 8
    return max(0, x[136] + 2.0*x[137] + 4.0*x[138] + 8.0*x[139] + 16.0*x[140] + 32.0*x[141] + 64.0*x[142] + 128.0*x[143] + -2.0*x[168] + -4.0*x[169] + -8.0*x[170] + -16.0*x[171] + -32.0*x[172] + -64.0*x[173] + -128.0*x[174] + -256.0*x[175] + -149.0)
import numpy as np


def l5438_30(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111110000000011111111
    # bitshifts    x[145] << 1    x[146] << 2    x[147] << 3    x[148] << 4    x[149] << 5    x[150] << 6    x[151] << 7    x[176] >> 1    x[177] >> 2    x[178] >> 3    x[179] >> 4    x[180] >> 5    x[181] >> 6    x[182] >> 7    x[183] >> 8
    return max(0, x[144] + 2.0*x[145] + 4.0*x[146] + 8.0*x[147] + 16.0*x[148] + 32.0*x[149] + 64.0*x[150] + 128.0*x[151] + -2.0*x[176] + -4.0*x[177] + -8.0*x[178] + -16.0*x[179] + -32.0*x[180] + -64.0*x[181] + -128.0*x[182] + -256.0*x[183] + -250.0)
import numpy as np


def l5438_31(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000
    # bitshifts    x[153] << 1    x[154] << 2    x[155] << 3    x[156] << 4    x[157] << 5    x[158] << 6    x[159] << 7    x[184] >> 1    x[185] >> 2    x[186] >> 3    x[187] >> 4    x[188] >> 5    x[189] >> 6    x[190] >> 7    x[191] >> 8
    return max(0, x[152] + 2.0*x[153] + 4.0*x[154] + 8.0*x[155] + 16.0*x[156] + 32.0*x[157] + 64.0*x[158] + 128.0*x[159] + -2.0*x[184] + -4.0*x[185] + -8.0*x[186] + -16.0*x[187] + -32.0*x[188] + -64.0*x[189] + -128.0*x[190] + -256.0*x[191] + -124.0)
import numpy as np


def l5438_32(x):
    # x is a list (or vector) of length 192
    # masks     # add: 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[1] << 1    x[2] << 2    x[3] << 3    x[4] << 4    x[5] << 5    x[6] << 6    x[7] << 7
    return max(0, x[0] + 2.0*x[1] + 4.0*x[2] + 8.0*x[3] + 16.0*x[4] + 32.0*x[5] + 64.0*x[6] + 128.0*x[7] + -198.0)
import numpy as np


def l5438_33(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[9] << 1    x[10] << 2    x[11] << 3    x[12] << 4    x[13] << 5    x[14] << 6    x[15] << 7
    return max(0, x[8] + 2.0*x[9] + 4.0*x[10] + 8.0*x[11] + 16.0*x[12] + 32.0*x[13] + 64.0*x[14] + 128.0*x[15] + -238.0)
import numpy as np


def l5438_34(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[17] << 1    x[18] << 2    x[19] << 3    x[20] << 4    x[21] << 5    x[22] << 6    x[23] << 7
    return max(0, x[16] + 2.0*x[17] + 4.0*x[18] + 8.0*x[19] + 16.0*x[20] + 32.0*x[21] + 64.0*x[22] + 128.0*x[23] + -100.0)
import numpy as np


def l5438_35(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[25] << 1    x[26] << 2    x[27] << 3    x[28] << 4    x[29] << 5    x[30] << 6    x[31] << 7
    return max(0, x[24] + 2.0*x[25] + 4.0*x[26] + 8.0*x[27] + 16.0*x[28] + 32.0*x[29] + 64.0*x[30] + 128.0*x[31] + -34.0)
import numpy as np


def l5438_36(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[33] << 1    x[34] << 2    x[35] << 3    x[36] << 4    x[37] << 5    x[38] << 6    x[39] << 7    x[64] >> 1    x[65] >> 2    x[66] >> 3    x[67] >> 4    x[68] >> 5    x[69] >> 6    x[70] >> 7    x[71] >> 8
    return max(0, x[32] + 2.0*x[33] + 4.0*x[34] + 8.0*x[35] + 16.0*x[36] + 32.0*x[37] + 64.0*x[38] + 128.0*x[39] + -2.0*x[64] + -4.0*x[65] + -8.0*x[66] + -16.0*x[67] + -32.0*x[68] + -64.0*x[69] + -128.0*x[70] + -256.0*x[71] + -59.0)
import numpy as np


def l5438_37(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111100000000111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[41] << 1    x[42] << 2    x[43] << 3    x[44] << 4    x[45] << 5    x[46] << 6    x[47] << 7    x[72] >> 1    x[73] >> 2    x[74] >> 3    x[75] >> 4    x[76] >> 5    x[77] >> 6    x[78] >> 7    x[79] >> 8
    return max(0, x[40] + 2.0*x[41] + 4.0*x[42] + 8.0*x[43] + 16.0*x[44] + 32.0*x[45] + 64.0*x[46] + 128.0*x[47] + -2.0*x[72] + -4.0*x[73] + -8.0*x[74] + -16.0*x[75] + -32.0*x[76] + -64.0*x[77] + -128.0*x[78] + -256.0*x[79] + -63.0)
import numpy as np


def l5438_38(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111000000001111111111111111111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[49] << 1    x[50] << 2    x[51] << 3    x[52] << 4    x[53] << 5    x[54] << 6    x[55] << 7    x[80] >> 1    x[81] >> 2    x[82] >> 3    x[83] >> 4    x[84] >> 5    x[85] >> 6    x[86] >> 7    x[87] >> 8
    return max(0, x[48] + 2.0*x[49] + 4.0*x[50] + 8.0*x[51] + 16.0*x[52] + 32.0*x[53] + 64.0*x[54] + 128.0*x[55] + -2.0*x[80] + -4.0*x[81] + -8.0*x[82] + -16.0*x[83] + -32.0*x[84] + -64.0*x[85] + -128.0*x[86] + -256.0*x[87] + -169.0)
import numpy as np


def l5438_39(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[57] << 1    x[58] << 2    x[59] << 3    x[60] << 4    x[61] << 5    x[62] << 6    x[63] << 7    x[88] >> 1    x[89] >> 2    x[90] >> 3    x[91] >> 4    x[92] >> 5    x[93] >> 6    x[94] >> 7    x[95] >> 8
    return max(0, x[56] + 2.0*x[57] + 4.0*x[58] + 8.0*x[59] + 16.0*x[60] + 32.0*x[61] + 64.0*x[62] + 128.0*x[63] + -2.0*x[88] + -4.0*x[89] + -8.0*x[90] + -16.0*x[91] + -32.0*x[92] + -64.0*x[93] + -128.0*x[94] + -256.0*x[95] + -49.0)
import numpy as np


def l5438_40(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[97] << 1    x[98] << 2    x[99] << 3    x[100] << 4    x[101] << 5    x[102] << 6    x[103] << 7
    return max(0, x[96] + 2.0*x[97] + 4.0*x[98] + 8.0*x[99] + 16.0*x[100] + 32.0*x[101] + 64.0*x[102] + 128.0*x[103] + -193.0)
import numpy as np


def l5438_41(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[105] << 1    x[106] << 2    x[107] << 3    x[108] << 4    x[109] << 5    x[110] << 6    x[111] << 7
    return max(0, x[104] + 2.0*x[105] + 4.0*x[106] + 8.0*x[107] + 16.0*x[108] + 32.0*x[109] + 64.0*x[110] + 128.0*x[111] + -184.0)
import numpy as np


def l5438_42(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000111111111111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[113] << 1    x[114] << 2    x[115] << 3    x[116] << 4    x[117] << 5    x[118] << 6    x[119] << 7
    return max(0, x[112] + 2.0*x[113] + 4.0*x[114] + 8.0*x[115] + 16.0*x[116] + 32.0*x[117] + 64.0*x[118] + 128.0*x[119] + -171.0)
import numpy as np


def l5438_43(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111111111111111111111111111111111111111111111
    # bitshifts    x[121] << 1    x[122] << 2    x[123] << 3    x[124] << 4    x[125] << 5    x[126] << 6    x[127] << 7
    return max(0, x[120] + 2.0*x[121] + 4.0*x[122] + 8.0*x[123] + 16.0*x[124] + 32.0*x[125] + 64.0*x[126] + 128.0*x[127] + -226.0)
import numpy as np


def l5438_44(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000111111111111111111111111
    # bitshifts    x[129] << 1    x[130] << 2    x[131] << 3    x[132] << 4    x[133] << 5    x[134] << 6    x[135] << 7    x[160] >> 1    x[161] >> 2    x[162] >> 3    x[163] >> 4    x[164] >> 5    x[165] >> 6    x[166] >> 7    x[167] >> 8
    return max(0, x[128] + 2.0*x[129] + 4.0*x[130] + 8.0*x[131] + 16.0*x[132] + 32.0*x[133] + 64.0*x[134] + 128.0*x[135] + -2.0*x[160] + -4.0*x[161] + -8.0*x[162] + -16.0*x[163] + -32.0*x[164] + -64.0*x[165] + -128.0*x[166] + -256.0*x[167] + -116.0)
import numpy as np


def l5438_45(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000111111111111111111111111000000001111111111111111
    # bitshifts    x[137] << 1    x[138] << 2    x[139] << 3    x[140] << 4    x[141] << 5    x[142] << 6    x[143] << 7    x[168] >> 1    x[169] >> 2    x[170] >> 3    x[171] >> 4    x[172] >> 5    x[173] >> 6    x[174] >> 7    x[175] >> 8
    return max(0, x[136] + 2.0*x[137] + 4.0*x[138] + 8.0*x[139] + 16.0*x[140] + 32.0*x[141] + 64.0*x[142] + 128.0*x[143] + -2.0*x[168] + -4.0*x[169] + -8.0*x[170] + -16.0*x[171] + -32.0*x[172] + -64.0*x[173] + -128.0*x[174] + -256.0*x[175] + -148.0)
import numpy as np


def l5438_46(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000001111111111111111111111110000000011111111
    # bitshifts    x[145] << 1    x[146] << 2    x[147] << 3    x[148] << 4    x[149] << 5    x[150] << 6    x[151] << 7    x[176] >> 1    x[177] >> 2    x[178] >> 3    x[179] >> 4    x[180] >> 5    x[181] >> 6    x[182] >> 7    x[183] >> 8
    return max(0, x[144] + 2.0*x[145] + 4.0*x[146] + 8.0*x[147] + 16.0*x[148] + 32.0*x[149] + 64.0*x[150] + 128.0*x[151] + -2.0*x[176] + -4.0*x[177] + -8.0*x[178] + -16.0*x[179] + -32.0*x[180] + -64.0*x[181] + -128.0*x[182] + -256.0*x[183] + -249.0)
import numpy as np


def l5438_47(x):
    # x is a list (or vector) of length 192
    # masks     # add: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000    # sub: 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    # zero: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000011111111111111111111111100000000
    # bitshifts    x[153] << 1    x[154] << 2    x[155] << 3    x[156] << 4    x[157] << 5    x[158] << 6    x[159] << 7    x[184] >> 1    x[185] >> 2    x[186] >> 3    x[187] >> 4    x[188] >> 5    x[189] >> 6    x[190] >> 7    x[191] >> 8
    return max(0, x[152] + 2.0*x[153] + 4.0*x[154] + 8.0*x[155] + 16.0*x[156] + 32.0*x[157] + 64.0*x[158] + 128.0*x[159] + -2.0*x[184] + -4.0*x[185] + -8.0*x[186] + -16.0*x[187] + -32.0*x[188] + -64.0*x[189] + -128.0*x[190] + -256.0*x[191] + -123.0)
def l5438_(x):
    # x is a list (or vector) of length 192
    return [
        l5438_0(x),
        l5438_1(x),
        l5438_2(x),
        l5438_3(x),
        l5438_4(x),
        l5438_5(x),
        l5438_6(x),
        l5438_7(x),
        l5438_8(x),
        l5438_9(x),
        l5438_10(x),
        l5438_11(x),
        l5438_12(x),
        l5438_13(x),
        l5438_14(x),
        l5438_15(x),
        l5438_16(x),
        l5438_17(x),
        l5438_18(x),
        l5438_19(x),
        l5438_20(x),
        l5438_21(x),
        l5438_22(x),
        l5438_23(x),
        l5438_24(x),
        l5438_25(x),
        l5438_26(x),
        l5438_27(x),
        l5438_28(x),
        l5438_29(x),
        l5438_30(x),
        l5438_31(x),
        l5438_32(x),
        l5438_33(x),
        l5438_34(x),
        l5438_35(x),
        l5438_36(x),
        l5438_37(x),
        l5438_38(x),
        l5438_39(x),
        l5438_40(x),
        l5438_41(x),
        l5438_42(x),
        l5438_43(x),
        l5438_44(x),
        l5438_45(x),
        l5438_46(x),
        l5438_47(x),
    ]


# Generated from reverse engineering
def l5438_g(x: np.ndarray) -> np.ndarray:
    # x is a list (or vector) of length 48
    out = np.empty(48, dtype=np.float32)
    
    biases = [-200.0]
    # for i in range(0, 1):
    for i in range(0, 1):
        s = x[0 + i] + 1 * 2.0 * x[i + 1] + 1 * 4.0 * x[i + 2] + 1 * 8.0 * x[i + 3] + 1 * 16.0 * x[i + 4] + 1 * 32.0 * x[i + 5] + 1 * 64.0 * x[i + 6] + 1 * 128.0 * x[i + 7]
        s += biases[i]
        out[0 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-240.0]
    # for i in range(1, 2):
    for i in range(0, 1):
        s = x[8 + i] + 1 * 2.0 * x[i + 9] + 1 * 4.0 * x[i + 10] + 1 * 8.0 * x[i + 11] + 1 * 16.0 * x[i + 12] + 1 * 32.0 * x[i + 13] + 1 * 64.0 * x[i + 14] + 1 * 128.0 * x[i + 15]
        s += biases[i]
        out[1 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-102.0]
    # for i in range(2, 3):
    for i in range(0, 1):
        s = x[16 + i] + 1 * 2.0 * x[i + 17] + 1 * 4.0 * x[i + 18] + 1 * 8.0 * x[i + 19] + 1 * 16.0 * x[i + 20] + 1 * 32.0 * x[i + 21] + 1 * 64.0 * x[i + 22] + 1 * 128.0 * x[i + 23]
        s += biases[i]
        out[2 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-36.0]
    # for i in range(3, 4):
    for i in range(0, 1):
        s = x[24 + i] + 1 * 2.0 * x[i + 25] + 1 * 4.0 * x[i + 26] + 1 * 8.0 * x[i + 27] + 1 * 16.0 * x[i + 28] + 1 * 32.0 * x[i + 29] + 1 * 64.0 * x[i + 30] + 1 * 128.0 * x[i + 31]
        s += biases[i]
        out[3 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-61.0]
    # for i in range(4, 5):
    for i in range(0, 1):
        s = x[32 + i] + 1 * 2.0 * x[i + 33] + 1 * 4.0 * x[i + 34] + 1 * 8.0 * x[i + 35] + 1 * 16.0 * x[i + 36] + 1 * 32.0 * x[i + 37] + 1 * 64.0 * x[i + 38] + 1 * 128.0 * x[i + 39] + -1 * -2.0 * x[i + 64] + -1 * -4.0 * x[i + 65] + -1 * -8.0 * x[i + 66] + -1 * -16.0 * x[i + 67] + -1 * -32.0 * x[i + 68] + -1 * -64.0 * x[i + 69] + -1 * -128.0 * x[i + 70] + -1 * -256.0 * x[i + 71]
        s += biases[i]
        out[4 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-65.0]
    # for i in range(5, 6):
    for i in range(0, 1):
        s = x[40 + i] + 1 * 2.0 * x[i + 41] + 1 * 4.0 * x[i + 42] + 1 * 8.0 * x[i + 43] + 1 * 16.0 * x[i + 44] + 1 * 32.0 * x[i + 45] + 1 * 64.0 * x[i + 46] + 1 * 128.0 * x[i + 47] + -1 * -2.0 * x[i + 72] + -1 * -4.0 * x[i + 73] + -1 * -8.0 * x[i + 74] + -1 * -16.0 * x[i + 75] + -1 * -32.0 * x[i + 76] + -1 * -64.0 * x[i + 77] + -1 * -128.0 * x[i + 78] + -1 * -256.0 * x[i + 79]
        s += biases[i]
        out[5 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-171.0]
    # for i in range(6, 7):
    for i in range(0, 1):
        s = x[48 + i] + 1 * 2.0 * x[i + 49] + 1 * 4.0 * x[i + 50] + 1 * 8.0 * x[i + 51] + 1 * 16.0 * x[i + 52] + 1 * 32.0 * x[i + 53] + 1 * 64.0 * x[i + 54] + 1 * 128.0 * x[i + 55] + -1 * -2.0 * x[i + 80] + -1 * -4.0 * x[i + 81] + -1 * -8.0 * x[i + 82] + -1 * -16.0 * x[i + 83] + -1 * -32.0 * x[i + 84] + -1 * -64.0 * x[i + 85] + -1 * -128.0 * x[i + 86] + -1 * -256.0 * x[i + 87]
        s += biases[i]
        out[6 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-51.0]
    # for i in range(7, 8):
    for i in range(0, 1):
        s = x[56 + i] + 1 * 2.0 * x[i + 57] + 1 * 4.0 * x[i + 58] + 1 * 8.0 * x[i + 59] + 1 * 16.0 * x[i + 60] + 1 * 32.0 * x[i + 61] + 1 * 64.0 * x[i + 62] + 1 * 128.0 * x[i + 63] + -1 * -2.0 * x[i + 88] + -1 * -4.0 * x[i + 89] + -1 * -8.0 * x[i + 90] + -1 * -16.0 * x[i + 91] + -1 * -32.0 * x[i + 92] + -1 * -64.0 * x[i + 93] + -1 * -128.0 * x[i + 94] + -1 * -256.0 * x[i + 95]
        s += biases[i]
        out[7 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-195.0]
    # for i in range(8, 9):
    for i in range(0, 1):
        s = x[96 + i] + 1 * 2.0 * x[i + 97] + 1 * 4.0 * x[i + 98] + 1 * 8.0 * x[i + 99] + 1 * 16.0 * x[i + 100] + 1 * 32.0 * x[i + 101] + 1 * 64.0 * x[i + 102] + 1 * 128.0 * x[i + 103]
        s += biases[i]
        out[8 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-186.0]
    # for i in range(9, 10):
    for i in range(0, 1):
        s = x[104 + i] + 1 * 2.0 * x[i + 105] + 1 * 4.0 * x[i + 106] + 1 * 8.0 * x[i + 107] + 1 * 16.0 * x[i + 108] + 1 * 32.0 * x[i + 109] + 1 * 64.0 * x[i + 110] + 1 * 128.0 * x[i + 111]
        s += biases[i]
        out[9 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-173.0]
    # for i in range(10, 11):
    for i in range(0, 1):
        s = x[112 + i] + 1 * 2.0 * x[i + 113] + 1 * 4.0 * x[i + 114] + 1 * 8.0 * x[i + 115] + 1 * 16.0 * x[i + 116] + 1 * 32.0 * x[i + 117] + 1 * 64.0 * x[i + 118] + 1 * 128.0 * x[i + 119]
        s += biases[i]
        out[10 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-228.0]
    # for i in range(11, 12):
    for i in range(0, 1):
        s = x[120 + i] + 1 * 2.0 * x[i + 121] + 1 * 4.0 * x[i + 122] + 1 * 8.0 * x[i + 123] + 1 * 16.0 * x[i + 124] + 1 * 32.0 * x[i + 125] + 1 * 64.0 * x[i + 126] + 1 * 128.0 * x[i + 127]
        s += biases[i]
        out[11 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-118.0]
    # for i in range(12, 13):
    for i in range(0, 1):
        s = x[128 + i] + 1 * 2.0 * x[i + 129] + 1 * 4.0 * x[i + 130] + 1 * 8.0 * x[i + 131] + 1 * 16.0 * x[i + 132] + 1 * 32.0 * x[i + 133] + 1 * 64.0 * x[i + 134] + 1 * 128.0 * x[i + 135] + -1 * -2.0 * x[i + 160] + -1 * -4.0 * x[i + 161] + -1 * -8.0 * x[i + 162] + -1 * -16.0 * x[i + 163] + -1 * -32.0 * x[i + 164] + -1 * -64.0 * x[i + 165] + -1 * -128.0 * x[i + 166] + -1 * -256.0 * x[i + 167]
        s += biases[i]
        out[12 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-150.0]
    # for i in range(13, 14):
    for i in range(0, 1):
        s = x[136 + i] + 1 * 2.0 * x[i + 137] + 1 * 4.0 * x[i + 138] + 1 * 8.0 * x[i + 139] + 1 * 16.0 * x[i + 140] + 1 * 32.0 * x[i + 141] + 1 * 64.0 * x[i + 142] + 1 * 128.0 * x[i + 143] + -1 * -2.0 * x[i + 168] + -1 * -4.0 * x[i + 169] + -1 * -8.0 * x[i + 170] + -1 * -16.0 * x[i + 171] + -1 * -32.0 * x[i + 172] + -1 * -64.0 * x[i + 173] + -1 * -128.0 * x[i + 174] + -1 * -256.0 * x[i + 175]
        s += biases[i]
        out[13 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-251.0]
    # for i in range(14, 15):
    for i in range(0, 1):
        s = x[144 + i] + 1 * 2.0 * x[i + 145] + 1 * 4.0 * x[i + 146] + 1 * 8.0 * x[i + 147] + 1 * 16.0 * x[i + 148] + 1 * 32.0 * x[i + 149] + 1 * 64.0 * x[i + 150] + 1 * 128.0 * x[i + 151] + -1 * -2.0 * x[i + 176] + -1 * -4.0 * x[i + 177] + -1 * -8.0 * x[i + 178] + -1 * -16.0 * x[i + 179] + -1 * -32.0 * x[i + 180] + -1 * -64.0 * x[i + 181] + -1 * -128.0 * x[i + 182] + -1 * -256.0 * x[i + 183]
        s += biases[i]
        out[14 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-125.0]
    # for i in range(15, 16):
    for i in range(0, 1):
        s = x[152 + i] + 1 * 2.0 * x[i + 153] + 1 * 4.0 * x[i + 154] + 1 * 8.0 * x[i + 155] + 1 * 16.0 * x[i + 156] + 1 * 32.0 * x[i + 157] + 1 * 64.0 * x[i + 158] + 1 * 128.0 * x[i + 159] + -1 * -2.0 * x[i + 184] + -1 * -4.0 * x[i + 185] + -1 * -8.0 * x[i + 186] + -1 * -16.0 * x[i + 187] + -1 * -32.0 * x[i + 188] + -1 * -64.0 * x[i + 189] + -1 * -128.0 * x[i + 190] + -1 * -256.0 * x[i + 191]
        s += biases[i]
        out[15 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-199.0]
    # for i in range(16, 17):
    for i in range(0, 1):
        s = x[0 + i] + 1 * 2.0 * x[i + 1] + 1 * 4.0 * x[i + 2] + 1 * 8.0 * x[i + 3] + 1 * 16.0 * x[i + 4] + 1 * 32.0 * x[i + 5] + 1 * 64.0 * x[i + 6] + 1 * 128.0 * x[i + 7]
        s += biases[i]
        out[16 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-239.0]
    # for i in range(17, 18):
    for i in range(0, 1):
        s = x[8 + i] + 1 * 2.0 * x[i + 9] + 1 * 4.0 * x[i + 10] + 1 * 8.0 * x[i + 11] + 1 * 16.0 * x[i + 12] + 1 * 32.0 * x[i + 13] + 1 * 64.0 * x[i + 14] + 1 * 128.0 * x[i + 15]
        s += biases[i]
        out[17 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-101.0]
    # for i in range(18, 19):
    for i in range(0, 1):
        s = x[16 + i] + 1 * 2.0 * x[i + 17] + 1 * 4.0 * x[i + 18] + 1 * 8.0 * x[i + 19] + 1 * 16.0 * x[i + 20] + 1 * 32.0 * x[i + 21] + 1 * 64.0 * x[i + 22] + 1 * 128.0 * x[i + 23]
        s += biases[i]
        out[18 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-35.0]
    # for i in range(19, 20):
    for i in range(0, 1):
        s = x[24 + i] + 1 * 2.0 * x[i + 25] + 1 * 4.0 * x[i + 26] + 1 * 8.0 * x[i + 27] + 1 * 16.0 * x[i + 28] + 1 * 32.0 * x[i + 29] + 1 * 64.0 * x[i + 30] + 1 * 128.0 * x[i + 31]
        s += biases[i]
        out[19 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-60.0]
    # for i in range(20, 21):
    for i in range(0, 1):
        s = x[32 + i] + 1 * 2.0 * x[i + 33] + 1 * 4.0 * x[i + 34] + 1 * 8.0 * x[i + 35] + 1 * 16.0 * x[i + 36] + 1 * 32.0 * x[i + 37] + 1 * 64.0 * x[i + 38] + 1 * 128.0 * x[i + 39] + -1 * -2.0 * x[i + 64] + -1 * -4.0 * x[i + 65] + -1 * -8.0 * x[i + 66] + -1 * -16.0 * x[i + 67] + -1 * -32.0 * x[i + 68] + -1 * -64.0 * x[i + 69] + -1 * -128.0 * x[i + 70] + -1 * -256.0 * x[i + 71]
        s += biases[i]
        out[20 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-64.0]
    # for i in range(21, 22):
    for i in range(0, 1):
        s = x[40 + i] + 1 * 2.0 * x[i + 41] + 1 * 4.0 * x[i + 42] + 1 * 8.0 * x[i + 43] + 1 * 16.0 * x[i + 44] + 1 * 32.0 * x[i + 45] + 1 * 64.0 * x[i + 46] + 1 * 128.0 * x[i + 47] + -1 * -2.0 * x[i + 72] + -1 * -4.0 * x[i + 73] + -1 * -8.0 * x[i + 74] + -1 * -16.0 * x[i + 75] + -1 * -32.0 * x[i + 76] + -1 * -64.0 * x[i + 77] + -1 * -128.0 * x[i + 78] + -1 * -256.0 * x[i + 79]
        s += biases[i]
        out[21 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-170.0]
    # for i in range(22, 23):
    for i in range(0, 1):
        s = x[48 + i] + 1 * 2.0 * x[i + 49] + 1 * 4.0 * x[i + 50] + 1 * 8.0 * x[i + 51] + 1 * 16.0 * x[i + 52] + 1 * 32.0 * x[i + 53] + 1 * 64.0 * x[i + 54] + 1 * 128.0 * x[i + 55] + -1 * -2.0 * x[i + 80] + -1 * -4.0 * x[i + 81] + -1 * -8.0 * x[i + 82] + -1 * -16.0 * x[i + 83] + -1 * -32.0 * x[i + 84] + -1 * -64.0 * x[i + 85] + -1 * -128.0 * x[i + 86] + -1 * -256.0 * x[i + 87]
        s += biases[i]
        out[22 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-50.0]
    # for i in range(23, 24):
    for i in range(0, 1):
        s = x[56 + i] + 1 * 2.0 * x[i + 57] + 1 * 4.0 * x[i + 58] + 1 * 8.0 * x[i + 59] + 1 * 16.0 * x[i + 60] + 1 * 32.0 * x[i + 61] + 1 * 64.0 * x[i + 62] + 1 * 128.0 * x[i + 63] + -1 * -2.0 * x[i + 88] + -1 * -4.0 * x[i + 89] + -1 * -8.0 * x[i + 90] + -1 * -16.0 * x[i + 91] + -1 * -32.0 * x[i + 92] + -1 * -64.0 * x[i + 93] + -1 * -128.0 * x[i + 94] + -1 * -256.0 * x[i + 95]
        s += biases[i]
        out[23 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-194.0]
    # for i in range(24, 25):
    for i in range(0, 1):
        s = x[96 + i] + 1 * 2.0 * x[i + 97] + 1 * 4.0 * x[i + 98] + 1 * 8.0 * x[i + 99] + 1 * 16.0 * x[i + 100] + 1 * 32.0 * x[i + 101] + 1 * 64.0 * x[i + 102] + 1 * 128.0 * x[i + 103]
        s += biases[i]
        out[24 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-185.0]
    # for i in range(25, 26):
    for i in range(0, 1):
        s = x[104 + i] + 1 * 2.0 * x[i + 105] + 1 * 4.0 * x[i + 106] + 1 * 8.0 * x[i + 107] + 1 * 16.0 * x[i + 108] + 1 * 32.0 * x[i + 109] + 1 * 64.0 * x[i + 110] + 1 * 128.0 * x[i + 111]
        s += biases[i]
        out[25 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-172.0]
    # for i in range(26, 27):
    for i in range(0, 1):
        s = x[112 + i] + 1 * 2.0 * x[i + 113] + 1 * 4.0 * x[i + 114] + 1 * 8.0 * x[i + 115] + 1 * 16.0 * x[i + 116] + 1 * 32.0 * x[i + 117] + 1 * 64.0 * x[i + 118] + 1 * 128.0 * x[i + 119]
        s += biases[i]
        out[26 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-227.0]
    # for i in range(27, 28):
    for i in range(0, 1):
        s = x[120 + i] + 1 * 2.0 * x[i + 121] + 1 * 4.0 * x[i + 122] + 1 * 8.0 * x[i + 123] + 1 * 16.0 * x[i + 124] + 1 * 32.0 * x[i + 125] + 1 * 64.0 * x[i + 126] + 1 * 128.0 * x[i + 127]
        s += biases[i]
        out[27 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-117.0]
    # for i in range(28, 29):
    for i in range(0, 1):
        s = x[128 + i] + 1 * 2.0 * x[i + 129] + 1 * 4.0 * x[i + 130] + 1 * 8.0 * x[i + 131] + 1 * 16.0 * x[i + 132] + 1 * 32.0 * x[i + 133] + 1 * 64.0 * x[i + 134] + 1 * 128.0 * x[i + 135] + -1 * -2.0 * x[i + 160] + -1 * -4.0 * x[i + 161] + -1 * -8.0 * x[i + 162] + -1 * -16.0 * x[i + 163] + -1 * -32.0 * x[i + 164] + -1 * -64.0 * x[i + 165] + -1 * -128.0 * x[i + 166] + -1 * -256.0 * x[i + 167]
        s += biases[i]
        out[28 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-149.0]
    # for i in range(29, 30):
    for i in range(0, 1):
        s = x[136 + i] + 1 * 2.0 * x[i + 137] + 1 * 4.0 * x[i + 138] + 1 * 8.0 * x[i + 139] + 1 * 16.0 * x[i + 140] + 1 * 32.0 * x[i + 141] + 1 * 64.0 * x[i + 142] + 1 * 128.0 * x[i + 143] + -1 * -2.0 * x[i + 168] + -1 * -4.0 * x[i + 169] + -1 * -8.0 * x[i + 170] + -1 * -16.0 * x[i + 171] + -1 * -32.0 * x[i + 172] + -1 * -64.0 * x[i + 173] + -1 * -128.0 * x[i + 174] + -1 * -256.0 * x[i + 175]
        s += biases[i]
        out[29 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-250.0]
    # for i in range(30, 31):
    for i in range(0, 1):
        s = x[144 + i] + 1 * 2.0 * x[i + 145] + 1 * 4.0 * x[i + 146] + 1 * 8.0 * x[i + 147] + 1 * 16.0 * x[i + 148] + 1 * 32.0 * x[i + 149] + 1 * 64.0 * x[i + 150] + 1 * 128.0 * x[i + 151] + -1 * -2.0 * x[i + 176] + -1 * -4.0 * x[i + 177] + -1 * -8.0 * x[i + 178] + -1 * -16.0 * x[i + 179] + -1 * -32.0 * x[i + 180] + -1 * -64.0 * x[i + 181] + -1 * -128.0 * x[i + 182] + -1 * -256.0 * x[i + 183]
        s += biases[i]
        out[30 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-124.0]
    # for i in range(31, 32):
    for i in range(0, 1):
        s = x[152 + i] + 1 * 2.0 * x[i + 153] + 1 * 4.0 * x[i + 154] + 1 * 8.0 * x[i + 155] + 1 * 16.0 * x[i + 156] + 1 * 32.0 * x[i + 157] + 1 * 64.0 * x[i + 158] + 1 * 128.0 * x[i + 159] + -1 * -2.0 * x[i + 184] + -1 * -4.0 * x[i + 185] + -1 * -8.0 * x[i + 186] + -1 * -16.0 * x[i + 187] + -1 * -32.0 * x[i + 188] + -1 * -64.0 * x[i + 189] + -1 * -128.0 * x[i + 190] + -1 * -256.0 * x[i + 191]
        s += biases[i]
        out[31 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-198.0]
    # for i in range(32, 33):
    for i in range(0, 1):
        s = x[0 + i] + 1 * 2.0 * x[i + 1] + 1 * 4.0 * x[i + 2] + 1 * 8.0 * x[i + 3] + 1 * 16.0 * x[i + 4] + 1 * 32.0 * x[i + 5] + 1 * 64.0 * x[i + 6] + 1 * 128.0 * x[i + 7]
        s += biases[i]
        out[32 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-238.0]
    # for i in range(33, 34):
    for i in range(0, 1):
        s = x[8 + i] + 1 * 2.0 * x[i + 9] + 1 * 4.0 * x[i + 10] + 1 * 8.0 * x[i + 11] + 1 * 16.0 * x[i + 12] + 1 * 32.0 * x[i + 13] + 1 * 64.0 * x[i + 14] + 1 * 128.0 * x[i + 15]
        s += biases[i]
        out[33 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-100.0]
    # for i in range(34, 35):
    for i in range(0, 1):
        s = x[16 + i] + 1 * 2.0 * x[i + 17] + 1 * 4.0 * x[i + 18] + 1 * 8.0 * x[i + 19] + 1 * 16.0 * x[i + 20] + 1 * 32.0 * x[i + 21] + 1 * 64.0 * x[i + 22] + 1 * 128.0 * x[i + 23]
        s += biases[i]
        out[34 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-34.0]
    # for i in range(35, 36):
    for i in range(0, 1):
        s = x[24 + i] + 1 * 2.0 * x[i + 25] + 1 * 4.0 * x[i + 26] + 1 * 8.0 * x[i + 27] + 1 * 16.0 * x[i + 28] + 1 * 32.0 * x[i + 29] + 1 * 64.0 * x[i + 30] + 1 * 128.0 * x[i + 31]
        s += biases[i]
        out[35 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-59.0]
    # for i in range(36, 37):
    for i in range(0, 1):
        s = x[32 + i] + 1 * 2.0 * x[i + 33] + 1 * 4.0 * x[i + 34] + 1 * 8.0 * x[i + 35] + 1 * 16.0 * x[i + 36] + 1 * 32.0 * x[i + 37] + 1 * 64.0 * x[i + 38] + 1 * 128.0 * x[i + 39] + -1 * -2.0 * x[i + 64] + -1 * -4.0 * x[i + 65] + -1 * -8.0 * x[i + 66] + -1 * -16.0 * x[i + 67] + -1 * -32.0 * x[i + 68] + -1 * -64.0 * x[i + 69] + -1 * -128.0 * x[i + 70] + -1 * -256.0 * x[i + 71]
        s += biases[i]
        out[36 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-63.0]
    # for i in range(37, 38):
    for i in range(0, 1):
        s = x[40 + i] + 1 * 2.0 * x[i + 41] + 1 * 4.0 * x[i + 42] + 1 * 8.0 * x[i + 43] + 1 * 16.0 * x[i + 44] + 1 * 32.0 * x[i + 45] + 1 * 64.0 * x[i + 46] + 1 * 128.0 * x[i + 47] + -1 * -2.0 * x[i + 72] + -1 * -4.0 * x[i + 73] + -1 * -8.0 * x[i + 74] + -1 * -16.0 * x[i + 75] + -1 * -32.0 * x[i + 76] + -1 * -64.0 * x[i + 77] + -1 * -128.0 * x[i + 78] + -1 * -256.0 * x[i + 79]
        s += biases[i]
        out[37 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-169.0]
    # for i in range(38, 39):
    for i in range(0, 1):
        s = x[48 + i] + 1 * 2.0 * x[i + 49] + 1 * 4.0 * x[i + 50] + 1 * 8.0 * x[i + 51] + 1 * 16.0 * x[i + 52] + 1 * 32.0 * x[i + 53] + 1 * 64.0 * x[i + 54] + 1 * 128.0 * x[i + 55] + -1 * -2.0 * x[i + 80] + -1 * -4.0 * x[i + 81] + -1 * -8.0 * x[i + 82] + -1 * -16.0 * x[i + 83] + -1 * -32.0 * x[i + 84] + -1 * -64.0 * x[i + 85] + -1 * -128.0 * x[i + 86] + -1 * -256.0 * x[i + 87]
        s += biases[i]
        out[38 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-49.0]
    # for i in range(39, 40):
    for i in range(0, 1):
        s = x[56 + i] + 1 * 2.0 * x[i + 57] + 1 * 4.0 * x[i + 58] + 1 * 8.0 * x[i + 59] + 1 * 16.0 * x[i + 60] + 1 * 32.0 * x[i + 61] + 1 * 64.0 * x[i + 62] + 1 * 128.0 * x[i + 63] + -1 * -2.0 * x[i + 88] + -1 * -4.0 * x[i + 89] + -1 * -8.0 * x[i + 90] + -1 * -16.0 * x[i + 91] + -1 * -32.0 * x[i + 92] + -1 * -64.0 * x[i + 93] + -1 * -128.0 * x[i + 94] + -1 * -256.0 * x[i + 95]
        s += biases[i]
        out[39 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-193.0]
    # for i in range(40, 41):
    for i in range(0, 1):
        s = x[96 + i] + 1 * 2.0 * x[i + 97] + 1 * 4.0 * x[i + 98] + 1 * 8.0 * x[i + 99] + 1 * 16.0 * x[i + 100] + 1 * 32.0 * x[i + 101] + 1 * 64.0 * x[i + 102] + 1 * 128.0 * x[i + 103]
        s += biases[i]
        out[40 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-184.0]
    # for i in range(41, 42):
    for i in range(0, 1):
        s = x[104 + i] + 1 * 2.0 * x[i + 105] + 1 * 4.0 * x[i + 106] + 1 * 8.0 * x[i + 107] + 1 * 16.0 * x[i + 108] + 1 * 32.0 * x[i + 109] + 1 * 64.0 * x[i + 110] + 1 * 128.0 * x[i + 111]
        s += biases[i]
        out[41 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-171.0]
    # for i in range(42, 43):
    for i in range(0, 1):
        s = x[112 + i] + 1 * 2.0 * x[i + 113] + 1 * 4.0 * x[i + 114] + 1 * 8.0 * x[i + 115] + 1 * 16.0 * x[i + 116] + 1 * 32.0 * x[i + 117] + 1 * 64.0 * x[i + 118] + 1 * 128.0 * x[i + 119]
        s += biases[i]
        out[42 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-226.0]
    # for i in range(43, 44):
    for i in range(0, 1):
        s = x[120 + i] + 1 * 2.0 * x[i + 121] + 1 * 4.0 * x[i + 122] + 1 * 8.0 * x[i + 123] + 1 * 16.0 * x[i + 124] + 1 * 32.0 * x[i + 125] + 1 * 64.0 * x[i + 126] + 1 * 128.0 * x[i + 127]
        s += biases[i]
        out[43 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-116.0]
    # for i in range(44, 45):
    for i in range(0, 1):
        s = x[128 + i] + 1 * 2.0 * x[i + 129] + 1 * 4.0 * x[i + 130] + 1 * 8.0 * x[i + 131] + 1 * 16.0 * x[i + 132] + 1 * 32.0 * x[i + 133] + 1 * 64.0 * x[i + 134] + 1 * 128.0 * x[i + 135] + -1 * -2.0 * x[i + 160] + -1 * -4.0 * x[i + 161] + -1 * -8.0 * x[i + 162] + -1 * -16.0 * x[i + 163] + -1 * -32.0 * x[i + 164] + -1 * -64.0 * x[i + 165] + -1 * -128.0 * x[i + 166] + -1 * -256.0 * x[i + 167]
        s += biases[i]
        out[44 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-148.0]
    # for i in range(45, 46):
    for i in range(0, 1):
        s = x[136 + i] + 1 * 2.0 * x[i + 137] + 1 * 4.0 * x[i + 138] + 1 * 8.0 * x[i + 139] + 1 * 16.0 * x[i + 140] + 1 * 32.0 * x[i + 141] + 1 * 64.0 * x[i + 142] + 1 * 128.0 * x[i + 143] + -1 * -2.0 * x[i + 168] + -1 * -4.0 * x[i + 169] + -1 * -8.0 * x[i + 170] + -1 * -16.0 * x[i + 171] + -1 * -32.0 * x[i + 172] + -1 * -64.0 * x[i + 173] + -1 * -128.0 * x[i + 174] + -1 * -256.0 * x[i + 175]
        s += biases[i]
        out[45 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-249.0]
    # for i in range(46, 47):
    for i in range(0, 1):
        s = x[144 + i] + 1 * 2.0 * x[i + 145] + 1 * 4.0 * x[i + 146] + 1 * 8.0 * x[i + 147] + 1 * 16.0 * x[i + 148] + 1 * 32.0 * x[i + 149] + 1 * 64.0 * x[i + 150] + 1 * 128.0 * x[i + 151] + -1 * -2.0 * x[i + 176] + -1 * -4.0 * x[i + 177] + -1 * -8.0 * x[i + 178] + -1 * -16.0 * x[i + 179] + -1 * -32.0 * x[i + 180] + -1 * -64.0 * x[i + 181] + -1 * -128.0 * x[i + 182] + -1 * -256.0 * x[i + 183]
        s += biases[i]
        out[46 + i] = s if s > 0 else 0.0 # ReLu
        
    biases = [-123.0]
    # for i in range(47, 48):
    for i in range(0, 1):
        s = x[152 + i] + 1 * 2.0 * x[i + 153] + 1 * 4.0 * x[i + 154] + 1 * 8.0 * x[i + 155] + 1 * 16.0 * x[i + 156] + 1 * 32.0 * x[i + 157] + 1 * 64.0 * x[i + 158] + 1 * 128.0 * x[i + 159] + -1 * -2.0 * x[i + 184] + -1 * -4.0 * x[i + 185] + -1 * -8.0 * x[i + 186] + -1 * -16.0 * x[i + 187] + -1 * -32.0 * x[i + 188] + -1 * -64.0 * x[i + 189] + -1 * -128.0 * x[i + 190] + -1 * -256.0 * x[i + 191]
        s += biases[i]
        out[47 + i] = s if s > 0 else 0.0 # ReLu
        
    return out



